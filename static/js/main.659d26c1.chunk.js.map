{"version":3,"sources":["components/PreferenceBtn.js","components/Preferences.js","components/ProgressMeter.js","components/Controls.js","components/Song.js","components/SongBtn.js","App.js","index.js"],"names":["PreferenceBtn","props","className","selected","role","classList","onClick","handler","part","setSelectedPreference","content","Preferences","useState","selectedPreference","isSelected","style","gridTemplateColumns","parts","length","map","initials","emphasizePart","isolatePart","gridColumn","fullChoir","ProgressMeter","progressWidth","setProgressWidth","meterWidth","setMeterWidth","meterRef","useRef","useEffect","computedWidth","window","getComputedStyle","current","getPropertyValue","parseInt","slice","newProgress","timestamp","duration","ref","e","rect","target","getBoundingClientRect","newTimestamp","clientX","x","seekTrack","width","Controls","handleKeyUp","keyCode","pauseTrack","resetTrack","playing","onKeyUp","playTrack","Song","setDuration","setTimestamp","setPlaying","loading","setLoading","seekingWhilePlaying","setSeekingWhilePlaying","audioRef","data","gainNodes","sourceNodes","loaded","ctxRef","ctx","AudioContext","webkitAudioContext","time","updaterRef","allLoaded","Object","values","forEach","then","decodedData","source","createBufferSource","buffer","connect","destination","start","playData","stop","myRequest","Request","location","fetch","response","arrayBuffer","decodeAudioData","console","log","getData","createGain","previousTime","currentTime","setInterval","timeElapsedSinceLastUpdate","t","clearInterval","title","charAt","join","emphasizedPart","gain","value","isolatedPart","SongBtn","setSelectedSong","id","App","selectedSong","melody","tenor","bass","soprano","alto","women","men","song","songContent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.659d26c1.chunk.js","sourcesContent":["import \"../style/PreferenceBtn.css\";\n\nfunction PreferenceBtn(props) {\n\n  const classList = function() {\n    const selected = (props.selected ? \" selected\" : \"\")\n    if (props.role === \"full-choir\") {\n      return \"PreferenceBtn full-choir\" + selected\n    } else {\n      return \"PreferenceBtn\" + selected\n    }\n  }\n\n  const handleClick = function() {\n    //This calls either emphasizePart or isolatePart\n    props.handler(props.part)\n    //This applies the \"selected\" className\n    props.setSelectedPreference({\n      role: props.role,\n      part: props.part\n    });\n  }\n\n  \n\n  return (\n    <button className={classList()} onClick={handleClick}>\n      {props.content}\n    </button>\n  )\n}\n\nexport default PreferenceBtn;","import { useState } from \"react\";\nimport PreferenceBtn from \"./PreferenceBtn.js\";\nimport \"../style/Preferences.css\";\n\nfunction Preferences(props) {\n  const [selectedPreference, setSelectedPreference] = useState({\n    role: \"full-choir\",\n    part: null\n  });\n  \n  const isSelected = function(role, part) {\n    if (selectedPreference.role === \"full-choir\" && role === \"full-choir\") {\n      return true\n    } else if (selectedPreference.role === role && selectedPreference.part === part) {\n      return true\n    } else {\n      return false\n    }\n  }\n  \n  return (\n    <div \n      className=\"Preferences\" \n      style={{gridTemplateColumns: `repeat (${props.parts.length}, auto)`}}\n    >  \n      \n        <span>Emphasize</span>\n        {props.parts.map(part => {\n          return (\n            <PreferenceBtn \n              key={`emphasize-${part}`}\n              part={part}\n              content={props.initials[part]}\n              role=\"emphasize\" \n              handler={props.emphasizePart}\n              selected={isSelected(\"emphasize\", part)}\n              setSelectedPreference={setSelectedPreference}\n            />\n          )\n        })}\n   \n        <span>Isolate</span>\n        {props.parts.map(part => {\n          return (\n            <PreferenceBtn \n              key={`isolate-${part}`}\n              part={part}\n              content={props.initials[part]}\n              role=\"isolate\" \n              handler={props.isolatePart}\n              selected={isSelected(\"isolate\", part)}\n              setSelectedPreference={setSelectedPreference}\n            />\n          )\n        })}\n\n        <div \n          className=\"full-choir-container\"\n          style={{gridColumn: `2 / ${props.parts.length + 2}`}}\n        >\n          <PreferenceBtn \n            onClick={props.fullChoir}\n            selected={isSelected(\"full-choir\")}\n            role={\"full-choir\"}\n            content=\"Full Choir\"\n            handler={props.fullChoir}\n            setSelectedPreference={setSelectedPreference}\n          />\n        </div>\n    </div>\n  )\n}\n\nexport default Preferences;","import {useRef, useState, useEffect} from \"react\";\nimport \"../style/ProgressMeter.css\"\n\nfunction ProgressMeter(props) {\n  \n  \n  const [progressWidth, setProgressWidth] = useState(0);\n  const [meterWidth, setMeterWidth] = useState(0);\n  let meterRef = useRef();\n\n  const updateProgress = function() {\n    // Set new width of progress bar based on fraction of track completed\n    const newProgress = (props.timestamp / props.duration) * meterWidth;\n    setProgressWidth(newProgress);\n  }\n\n  const handleSeek = function(e) {\n    const rect = e.target.getBoundingClientRect();\n    const clickPosition = e.clientX - rect.x;\n    //Seek track to new timestamp based on click position within the meter\n    const newTimestamp = (clickPosition / meterWidth) * props.duration;\n    props.seekTrack(newTimestamp);\n  }\n\n    useEffect(() => {\n      //Get the actual width of the progressMeter\n      const computedWidth = (\n        window.getComputedStyle(meterRef.current).getPropertyValue(\"width\")\n      )\n      //Get rid of \"px\" and convert to Integer\n      setMeterWidth(parseInt(computedWidth.slice(0, 3)));\n    // eslint-disable-next-line\n    }, [])\n\n    //Update position of progress bar every time the timestamp updates\n    // eslint-disable-next-line\n    useEffect(updateProgress, [props.timestamp])\n\n  \n  return (\n    <div className=\"ProgressMeter\" ref={meterRef} onClick={handleSeek}>\n      <div className=\"progress-bar\" style={{width: progressWidth}}></div>\n    </div>\n  )\n}\n\nexport default ProgressMeter;","import ProgressMeter from \"./ProgressMeter.js\";\nimport PlayIcon from \"@material-ui/icons/PlayArrowRounded\";\nimport PauseIcon from \"@material-ui/icons/PauseRounded\";\nimport ResetIcon from \"@material-ui/icons/ReplayRounded\";\nimport \"../style/Controls.css\";\n\nfunction Controls(props) {\n  const handleKeyUp = function(e) {\n    if (e.keyCode === 32) {\n      props.pauseTrack();\n    }\n  }\n\n  const playOrPauseBtn = function() {\n    if (props.playing) {\n      return (\n      <button \n        className=\"control-btn\" \n        onClick={props.pauseTrack}\n        onKeyUp={handleKeyUp}\n      >\n        <PauseIcon />\n      </button>\n      )\n    } else {\n      return (\n      <button \n        className=\"control-btn\" \n        onClick={props.playTrack}\n      >\n        <PlayIcon />\n      </button>\n      )\n    }\n  }\n\n  return (\n    <div className=\"Controls\">\n      <button className=\"control-btn\" onClick={props.resetTrack}>\n        <ResetIcon />\n      </button>\n      {playOrPauseBtn()}\n      <div className=\"progress-meter-container\">\n        <ProgressMeter \n          seekTrack={props.seekTrack} \n          duration={props.duration}\n          timestamp={props.timestamp}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Controls;","import { useState, useEffect, useRef } from \"react\";\nimport LoadingMask from \"react-loadingmask\";\nimport \"react-loadingmask/dist/react-loadingmask.css\";\nimport Preferences from \"././Preferences.js\"\nimport Controls from \"./Controls.js\";\nimport \"../style/Song.css\";\n\n\nfunction Song(props) {\n  //Set duration to an arbitrarily long amount of time until song loads\n  const [duration, setDuration] = useState(10000);\n  const [timestamp, setTimestamp] = useState(0);\n  const [playing, setPlaying] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [seekingWhilePlaying, setSeekingWhilePlaying] = useState(false);\n  let audioRef = useRef({\n    data: {},\n    gainNodes: {},\n    sourceNodes: {},\n    loaded: {}\n  });\n  const ctxRef = useRef({\n    ctx: new (window.AudioContext || window.webkitAudioContext)(),\n    time: 0\n  })\n\n  const updaterRef = useRef();\n\n\n  const getData = function(part) {\n    const myRequest = new Request(`./tracks/${props.location}/${part}.mp3`);\n    return fetch(myRequest)\n    .then(response => {\n      return response.arrayBuffer();\n    })\n    .then(buffer => {\n        return ctxRef.current.ctx.decodeAudioData(buffer, decodedData => {\n          audioRef.current.loaded[part] = true\n          console.log(part, \"loaded\")\n          if (allLoaded()) {setLoading(false)}\n          return decodedData;\n      });\n    })\n  }\n\n  const allLoaded = function() {\n    //Check if all the parts have been recorded as loaded\n    return (Object.values(audioRef.current.loaded).length === props.parts.length)\n  }\n\n  const playData = function(part) {\n    audioRef.current.data[part].then(decodedData => {\n      // Create source node\n      const source = ctxRef.current.ctx.createBufferSource();\n      // Store the source in the sourcesRef\n      audioRef.current.sourceNodes[part] = source\n      // Wire up the data\n      source.buffer = decodedData;\n      // Connect the source node to the gain node (which controls the volume)\n      source.connect(audioRef.current.gainNodes[part]);\n      // Connect the gain node to the destination (e.g., speakers) and start the audio\n      audioRef.current.gainNodes[part].connect(ctxRef.current.ctx.destination);\n      source.start(0, timestamp)\n    })\n  }\n\n  const playTrack = function() {\n    if (playing) {\n      return\n    }\n    props.parts.forEach(part => {\n      playData(part);\n    });\n    //Indicate that play has begun\n    setPlaying(true);\n  }\n\n\n\n  const pauseTrack = function() {\n    if (playing) {\n      props.parts.forEach(part => {\n        audioRef.current.sourceNodes[part].stop();\n      });\n      //Indicate that playing has stopped\n      setPlaying(false);\n    }\n  }\n\n  const resetTrack = function() {\n    pauseTrack();\n    setTimestamp(0); \n  }\n\n  const seekTrack = function(newTimestamp) {\n    if (playing) {\n      setSeekingWhilePlaying(true);\n    }\n    pauseTrack();\n    setTimestamp(newTimestamp);\n    //Allow useEffect to restart\n  }\n\n  //Execute when seekingWhilePlaying state changes\n  useEffect(() => {\n    if (seekingWhilePlaying) {\n      //Restart the track after seek\n      playTrack();\n      setSeekingWhilePlaying(false);\n    }\n    //eslint-disable-next-line\n   }, [seekingWhilePlaying]);\n\n\n   const emphasizePart = function(emphasizedPart) {\n    props.parts.forEach(part => {\n      if (part === emphasizedPart) {\n        //Set part to be emphasized at full volume\n        audioRef.current.gainNodes[part].gain.value = 1\n      } else {\n        //Set the rest of the parts at a low volume\n        audioRef.current.gainNodes[part].gain.value = .1;\n      }\n    })\n  }\n\n  const isolatePart = function(isolatedPart) {\n    props.parts.forEach(part => {\n      if (part === isolatedPart) {\n        //Set part to be isolated at full volume\n        audioRef.current.gainNodes[part].gain.value = 1\n      } else {\n        //Mute the rest of the parts\n        audioRef.current.gainNodes[part].gain.value = 0;\n      }\n    })\n  }\n\n  const fullChoir = function() {\n    props.parts.forEach(part => audioRef.current.gainNodes[part].gain.value = 1);\n  }\n\n  const createUpdaterInterval = function() {\n    return setInterval(() => {\n      const timeElapsedSinceLastUpdate = (\n        ctxRef.current.ctx.currentTime - ctxRef.current.previousTime\n      );\n      //Bring the time property up to date with the currentTime\n      ctxRef.current.previousTime = ctxRef.current.ctx.currentTime;\n      setTimestamp(t => t + timeElapsedSinceLastUpdate);\n    }, 250);\n  }\n\n  const getCapitalizedPartsString = function() {\n    const capitalizedArray = props.parts.map(part => {\n      return part.charAt(0) + part.slice(1);\n    })\n    return capitalizedArray.join(\", \")\n   \n  }\n\n  //Execute on ComponentDidMount\n  useEffect(() => {\n    props.parts.forEach(part => {\n      //Load audio for each part\n      audioRef.current.data[part] = getData(part)\n      //Create a gain (volume) node for each part\n      audioRef.current.gainNodes[part] = ctxRef.current.ctx.createGain();\n    });\n    //Once loaded, select the first part arbitrarily and set the duration\n    Object.values(audioRef.current.data)[0].then(buffer => setDuration(buffer.duration));\n  // eslint-disable-next-line\n  }, [])\n\n  //Execute when playing state changes\n  useEffect(() => {\n    if (playing) {\n      //Before the updater Interval starts, bring the time up to date with the\n      //Audio Context's currentTime\n      ctxRef.current.previousTime = ctxRef.current.ctx.currentTime;\n      updaterRef.current = createUpdaterInterval();\n    } else {\n      clearInterval(updaterRef.current);\n    }\n    return () => clearInterval(updaterRef.current);\n    // eslint-disable-next-line\n  }, [playing])\n\n  //Execute when the timestamp updates\n  useEffect(() => {\n    //If the timestamp exceeds duration of the track,\n    //stop the track and reset the timestamp to 0\n    if (timestamp > duration) {\n      resetTrack();\n    }\n    // eslint-disable-next-line\n  }, [timestamp])\n\n  const loadingMessage = function() {\n    if (loading) {\n      return \"Loading song (this might take a bit)\"\n    } else {\n      return \"\"\n    }\n  }\n\n  return (\n      <div className=\"Song\">\n        <h2 className=\"song-title\">{props.title}</h2>\n        <span className=\"loading-message\">{loadingMessage()}</span>\n        <LoadingMask loading={loading}>\n          <Controls\n            playTrack={playTrack}\n            resetTrack={resetTrack}\n            pauseTrack={pauseTrack}\n            seekTrack={seekTrack}\n            timestamp={timestamp}\n            duration={duration}\n            playing={playing}\n          />\n          <span className=\"parts\">\n            {`Parts: ${getCapitalizedPartsString()}`}\n          </span>\n          <Preferences \n            parts={props.parts}\n            initials={props.initials}\n            emphasizePart={emphasizePart}\n            isolatePart={isolatePart}\n            fullChoir={fullChoir} \n          />\n          </LoadingMask>\n        \n      </div>\n  )\n}\n\nexport default Song;","import \"../style/SongBtn.css\";\n\nfunction SongBtn(props) {\n\n  \n\n  const handleClick = function() {\n    props.setSelectedSong(props.id);\n  }\n\n  return (\n    <button className=\"SongBtn\" onClick={handleClick}>\n      {props.title}\n    </button>\n  )\n}\n\nexport default SongBtn;\n","import \"./App.css\";\nimport { useState } from \"react\"\nimport Song from \"./components/Song.js\";\nimport SongBtn from \"./components/SongBtn.js\";\n\nfunction App() {\n  //Store id of selected song\n  const [selectedSong, setSelectedSong] = useState(null);\n\n\n  const songContent = function(song) {\n    if (song.id === selectedSong) {\n      return (\n        <Song \n        location={song.location}\n        title={song.title}\n        parts={song.parts}\n        initials={song.initials}\n        key={song.id}\n      />\n      )\n    } else {\n      return (\n        <SongBtn \n          title={song.title}\n          id={song.id}\n          setSelectedSong={setSelectedSong}\n          key={song.title + song.id}\n        />\n      )\n    }\n  }\n  const songs = [\n    {location: \"it_is_truly_meet_3\",\n    title: \"It Is Truly Meet #3\",\n      parts: [\"melody\", \"tenor\", \"bass\"],\n      initials: {\n        melody: \"M\",\n        tenor: \"T\",\n        bass: \"B\"\n      },\n      id: 1\n    },\n    {location: \"ascension-megalonarion\",\n    title: \"Ascension Megalonarion\",\n    parts: [\"soprano\", \"alto\", \"tenor\", \"bass\"],\n    initials: {\n      soprano: \"S\",\n      alto: \"A\",\n      tenor: \"T\",\n      bass: \"B\"\n      },\n    id: 2 \n    },\n    {location: \"for-all-the-saints\",\n    title: \"For All The Saints\",\n    parts: [\"women\", \"men\"],\n    initials: {\n      women: \"W\",\n      men: \"M\"\n      },\n    id: 3 \n    }\n\n  ]\n  return (\n    <div className=\"App\">\n      <h1>Holy Transfiguration Choir</h1>\n      <section id=\"overview\">\n        <p >\n          Welcome to the HT choral resources!\n          Hopefully, there will be a lot more to come, but for right now,\n          check out the song player below. If you click on one of the titles,\n          you can play the song with options to hear your part by itself (\"isolate\"),\n          or with the other parts softer (\"emphasize\").\n        </p>\n        <p id=\"disclaimer\">\n          NB: &ensp; This player ain't gonna work on a mobile device. &nbsp;\n          Also, you may find that you get the best experience using headphones,\n          especially when selecting \"emphasize\".\n        </p>\n      </section>\n      \n      {songs.map(song => {\n        return songContent(song);\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import Routes from './Routes';\nimport App from \"./App.js\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}