{"version":3,"sources":["components/PreferenceBtn.js","components/Preferences.js","components/ProgressMeter.js","components/Controls.js","apiUrl.js","components/Song.js","components/SongBtn.js","components/Home.js","components/RecordingInput.js","components/PartFormlet.js","components/SongForm.js","components/PartLoadingEntry.js","components/SubmitProgress.js","components/SongFactory.js","components/SongInfo.js","components/CurrentCollection.js","components/Admin.js","components/AdminFilter.js","components/Login.js","App.js","index.js"],"names":["PreferenceBtn","props","className","selected","role","classList","onClick","handler","partName","setSelectedPreference","content","Preferences","useState","selectedPreference","isSelected","style","gridTemplateColumns","parts","length","map","part","name","initial","emphasizePart","isolatePart","gridColumn","fullChoir","ProgressMeter","progressWidth","setProgressWidth","meterWidth","setMeterWidth","meterRef","useRef","useEffect","computedWidth","window","getComputedStyle","current","getPropertyValue","parseInt","slice","newProgress","timestamp","duration","ref","e","rect","target","getBoundingClientRect","newTimestamp","clientX","x","seekTrack","width","Controls","handleKeyUp","keyCode","pauseTrack","resetTrack","playing","onKeyUp","playTrack","apiUrl","Song","setDuration","setTimestamp","setPlaying","loading","setLoading","setParts","seekingWhilePlaying","setSeekingWhilePlaying","audioRef","data","gainNodes","sourceNodes","loaded","ctxRef","ctx","AudioContext","webkitAudioContext","time","updaterRef","allLoaded","Object","values","forEach","then","decodedData","source","createBufferSource","buffer","connect","destination","start","playData","stop","loadParts","abortControllerSignal","a","fetch","id","signal","response","json","partsData","abortController","AbortController","abort","node","myRequest","Request","url","splitArray","split","splice","join","convertUrlToMp3","recording","arrayBuffer","decodeAudioData","console","log","getData","createGain","previousTime","currentTime","setInterval","timeElapsedSinceLastUpdate","t","clearInterval","title","charAt","emphasizedPart","gain","value","isolatedPart","SongBtn","setSelectedSong","Home","selectedSong","songs","setSongs","songsData","aborted","fetchSongs","to","song","songContent","RecordingInput","mode","acceptNewRecording","setAcceptNewRecording","overrideRecording","revertToOldRecording","type","accept","onChange","handleFileUpload","required","PartFormlet","handleFormChange","updatePart","index","placeholder","removePart","files","SongForm","newPart","key","uniqid","editableParts","initialParts","i","editableSong","railsPart","initializeParts","factoryMode","setTitle","oldParts","property","newValue","assembleLoadingsObject","loadingParts","setLoadings","loadings","success","progressEvent","indicateSuccess","deleteObsoleteParts","obsoleteParts","UpdatingPartIds","filter","includes","getObsoleteParts","destroyExistingPart","destroyExistingSong","cancelSources","setFactoryMode","axios","method","headers","Authorization","token","cancelToken","timeout","status","setJobStatus","songId","sendPart","partData","cancelSource","submitPart","FormData","append","indexOf","sendSong","songData","jobStatus","submitSong","handleDestroySong","confirm","CancelToken","push","setCancelSources","onSubmit","preventDefault","additionalPart","deleteBtn","PartLoadedEntry","loadedEntryVerbs","working","finished","SubmitProgress","topMessage","entries","partLoadingEntry","responseMessage","SongFactory","handleNewSong","every","button","SongInfo","handleEdit","editSong","editButton","songParts","CurrentCollection","keys","toString","Admin","setEditableSong","setEditableParts","loadSongs","songsAndParts","cancel","AdminFilter","Login","isAuthed","setIsAuthed","incorrectCredentials","setIncorrectCredentials","username","password","formData","setFormData","handleChange","params","body","decodedResponse","localStorage","setItem","setToken","catch","err","htmlFor","App","getItem","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"snBA8BeA,MA5Bf,SAAuBC,GAqBrB,OACE,wBAAQC,UApBQ,WAChB,IAAMC,EAAYF,EAAME,SAAW,YAAc,GACjD,MAAmB,eAAfF,EAAMG,KACD,2BAA6BD,EAE7B,gBAAkBA,EAeRE,GAAaC,QAXd,WAElBL,EAAMM,QAAQN,EAAMO,UAEpBP,EAAMQ,sBAAsB,CAC1BL,KAAMH,EAAMG,KACZI,SAAUP,EAAMO,YAKlB,SACGP,EAAMS,W,MCgDEC,MArEf,SAAqBV,GAAQ,IAAD,EAC0BW,mBAAS,CAC3DR,KAAM,aACNI,SAAU,OAHc,mBACnBK,EADmB,KACCJ,EADD,KAMpBK,EAAa,SAASV,EAAMI,GAChC,MAAgC,eAA5BK,EAAmBT,MAAkC,eAATA,GAErCS,EAAmBT,OAASA,GAAQS,EAAmBL,WAAaA,GAOjF,OACE,sBACEN,UAAU,cACVa,MAAO,CAACC,oBAAoB,WAAD,OAAaf,EAAMgB,MAAMC,OAAzB,YAF7B,UAKI,6CACCjB,EAAMgB,MAAME,KAAI,SAAAC,GACf,OACE,cAAC,EAAD,CAEEZ,SAAUY,EAAKC,KACfX,QAASU,EAAKE,QACdlB,KAAK,YACLG,QAASN,EAAMsB,cACfpB,SAAUW,EAAW,YAAaM,EAAKC,MACvCZ,sBAAuBA,GAPzB,oBACoBW,EAAKC,UAW7B,2CACCpB,EAAMgB,MAAME,KAAI,SAAAC,GACf,OACE,cAAC,EAAD,CAEEZ,SAAUY,EAAKC,KACfX,QAASU,EAAKE,QACdlB,KAAK,UACLG,QAASN,EAAMuB,YACfrB,SAAUW,EAAW,UAAWM,EAAKC,MACrCZ,sBAAuBA,GAPzB,kBACkBW,EAAKC,UAW3B,qBACEnB,UAAU,uBACVa,MAAO,CAACU,WAAW,OAAD,OAASxB,EAAMgB,MAAMC,OAAS,IAFlD,SAIE,cAAC,EAAD,CACEZ,QAASL,EAAMyB,UACfvB,SAAUW,EAAW,cACrBV,KAAM,aACNM,QAAQ,aACRH,QAASN,EAAMyB,UACfjB,sBAAuBA,U,MCpBpBkB,MA3Cf,SAAuB1B,GAAQ,IAAD,EAGcW,mBAAS,GAHvB,mBAGrBgB,EAHqB,KAGNC,EAHM,OAIQjB,mBAAS,GAJjB,mBAIrBkB,EAJqB,KAITC,EAJS,KAKxBC,EAAWC,mBA+Bf,OAfEC,qBAAU,WAER,IAAMC,EACJC,OAAOC,iBAAiBL,EAASM,SAASC,iBAAiB,SAG7DR,EAAcS,SAASL,EAAcM,MAAM,EAAG,OAE7C,IAIHP,qBA1BqB,WAErB,IAAMQ,EAAezC,EAAM0C,UAAY1C,EAAM2C,SAAYd,EACzDD,EAAiBa,KAuBS,CAACzC,EAAM0C,YAIjC,qBAAKzC,UAAU,gBAAgB2C,IAAKb,EAAU1B,QAxB7B,SAASwC,GAC1B,IAAMC,EAAOD,EAAEE,OAAOC,wBAGhBC,GAFgBJ,EAAEK,QAAUJ,EAAKK,GAEDtB,EAAc7B,EAAM2C,SAC1D3C,EAAMoD,UAAUH,IAmBhB,SACE,qBAAKhD,UAAU,eAAea,MAAO,CAACuC,MAAO1B,Q,yDCYpC2B,MA/Cf,SAAkBtD,GAChB,IAAMuD,EAAc,SAASV,GACT,KAAdA,EAAEW,SACJxD,EAAMyD,cA2BV,OACE,sBAAKxD,UAAU,WAAf,UACE,wBAAQA,UAAU,cAAcI,QAASL,EAAM0D,WAA/C,SACE,cAAC,IAAD,MAzBA1D,EAAM2D,QAER,wBACE1D,UAAU,cACVI,QAASL,EAAMyD,WACfG,QAASL,EAHX,SAKE,cAAC,IAAD,MAKF,wBACEtD,UAAU,cACVI,QAASL,EAAM6D,UAFjB,SAIE,cAAC,IAAD,MAYF,qBAAK5D,UAAU,2BAAf,SACE,cAAC,EAAD,CACEmD,UAAWpD,EAAMoD,UACjBT,SAAU3C,EAAM2C,SAChBD,UAAW1C,EAAM0C,kBC9CdoB,G,MAAS,2CC6QPC,MApQf,SAAc/D,GAAO,MAEaW,mBAAS,KAFtB,mBAEZgC,EAFY,KAEFqB,EAFE,OAGerD,mBAAS,GAHxB,mBAGZ+B,EAHY,KAGDuB,EAHC,OAIWtD,oBAAS,GAJpB,mBAIZgD,EAJY,KAIHO,EAJG,OAKWvD,oBAAS,GALpB,mBAKZwD,EALY,KAKHC,EALG,OAMOzD,mBAAS,IANhB,mBAMZK,EANY,KAMLqD,EANK,OAOmC1D,oBAAS,GAP5C,mBAOZ2D,EAPY,KAOSC,EAPT,KAQfC,EAAWxC,iBAAO,CACpByC,KAAM,GACNC,UAAW,GACXC,YAAa,GACbC,OAAQ,KAEJC,EAAS7C,iBAAO,CACpB8C,IAAK,IAAK3C,OAAO4C,cAAgB5C,OAAO6C,oBACxCC,KAAM,IAGFC,EAAalD,mBA2BbmD,EAAY,WAEhB,OAAQC,OAAOC,OAAOb,EAASnC,QAAQuC,QAAQ3D,SAAWD,EAAMC,QAmB5D4C,EAAY,WACZF,IAGJ3C,EAAMsE,SAAQ,SAAAnE,IApBC,SAASA,GACxBqD,EAASnC,QAAQoC,KAAKtD,EAAKC,MAAMmE,MAAK,SAAAC,GAEpC,IAAMC,EAASZ,EAAOxC,QAAQyC,IAAIY,qBAElClB,EAASnC,QAAQsC,YAAYxD,EAAKC,MAAQqE,EAE1CA,EAAOE,OAASH,EAEhBC,EAAOG,QAAQpB,EAASnC,QAAQqC,UAAUvD,EAAKC,OAE/CoD,EAASnC,QAAQqC,UAAUvD,EAAKC,MAAMwE,QAAQf,EAAOxC,QAAQyC,IAAIe,aACjEJ,EAAOK,MAAM,EAAGpD,MAShBqD,CAAS5E,MAGX+C,GAAW,KAGPT,EAAa,WACbE,IACF3C,EAAMsE,SAAQ,SAAAnE,GACZqD,EAASnC,QAAQsC,YAAYxD,EAAKC,MAAM4E,UAG1C9B,GAAW,KAITR,EAAa,WACjBD,IACAQ,EAAa,IAafhC,qBAAU,WACJqC,IAEFT,IACAU,GAAuB,MAGvB,CAACD,IAEJ,IAiDK2B,EAAS,uCAAG,WAAeC,GAAf,iBAAAC,EAAA,sEAEOC,MAAM,GAAD,OAAItC,EAAJ,kBAAoB9D,EAAMqG,GAA1B,UAAsC,CAChEC,OAAQJ,IAHM,cAEVK,EAFU,gBAKQA,EAASC,OALjB,OAKVC,EALU,OAMhBpC,EAASoC,GANO,2CAAH,sDAsEf,OA5DAxE,qBAAU,WACR,IAAMyE,EAAkB,IAAIC,gBACtBhC,EAAcH,EAASnC,QAAQsC,YAIrC,OAHAsB,EAAUS,EAAgBJ,QAGnB,WACLI,EAAgBE,QAChBxB,OAAOC,OAAOV,GAAaW,SAAQ,SAAAuB,GAAI,OAAIA,EAAKb,aAGjD,IAGH/D,qBAAU,WACJjB,EAAMC,OAAS,IACjBD,EAAMsE,SAAQ,SAAAnE,GAEZqD,EAASnC,QAAQoC,KAAKtD,EAAKC,MAhKjB,SAASD,GAEvB,IAAM2F,EAAY,IAAIC,QAVA,SAASC,GAC/B,IAAMC,EAAaD,EAAIE,MAAM,KAI7B,OADAD,EAAWE,OAAQF,EAAWhG,OAAS,EAAI,EAAG,OACvCgG,EAAWG,KAAK,KAKOC,CAAgBlG,EAAKmG,YACnD,OAAOlB,MAAMU,GACZvB,MAAK,SAAAgB,GACJ,OAAOA,EAASgB,iBAEjBhC,MAAK,SAAAI,GACF,OAAOd,EAAOxC,QAAQyC,IAAI0C,gBAAgB7B,GAAQ,SAAAH,GAIhD,OAHAhB,EAASnC,QAAQuC,OAAOzD,EAAKC,OAAQ,EACrCqG,QAAQC,IAAIvG,EAAKC,KAAM,UACnB+D,KAAcf,GAAW,GACtBoB,QAoJ0BmC,CAAQxG,GAE3CqD,EAASnC,QAAQqC,UAAUvD,EAAKC,MAAQyD,EAAOxC,QAAQyC,IAAI8C,gBAG7DxC,OAAOC,OAAOb,EAASnC,QAAQoC,MAAM,GAAGc,MAAK,SAAAI,GAAM,OAAI3B,EAAY2B,EAAOhD,gBAG3E,CAAC3B,IAGJiB,qBAAU,WASR,OARI0B,GAGFkB,EAAOxC,QAAQwF,aAAehD,EAAOxC,QAAQyC,IAAIgD,YACjD5C,EAAW7C,QA9DN0F,aAAY,WACjB,IAAMC,EACJnD,EAAOxC,QAAQyC,IAAIgD,YAAcjD,EAAOxC,QAAQwF,aAGlDhD,EAAOxC,QAAQwF,aAAehD,EAAOxC,QAAQyC,IAAIgD,YACjD7D,GAAa,SAAAgE,GAAC,OAAIA,EAAID,OACrB,MAyDDE,cAAchD,EAAW7C,SAEpB,kBAAM6F,cAAchD,EAAW7C,YAErC,CAACsB,IAGJ1B,qBAAU,WAGJS,EAAYC,GACde,MAGD,CAAChB,IAWA,sBAAKzC,UAAU,OAAf,UACE,oBAAIA,UAAU,aAAd,SAA4BD,EAAMmI,QAClC,sBAAMlI,UAAU,kBAAhB,SAVAkE,EACK,uCAEA,KAQL,eAAC,IAAD,CAAaA,QAASA,EAAtB,UACE,cAAC,EAAD,CACEN,UAAWA,EACXH,WAAYA,EACZD,WAAYA,EACZL,UAnJQ,SAASH,GACrBU,GACFY,GAAuB,GAEzBd,IACAQ,EAAahB,IA+ILP,UAAWA,EACXC,SAAUA,EACVgB,QAASA,IAEX,sBAAM1D,UAAU,QAAhB,0BA3FmBe,EAAME,KAAI,SAAAC,GACjC,IAAMZ,EAAWY,EAAKC,KACtB,OAAOb,EAAS6H,OAAO,GAAK7H,EAASiC,MAAM,MAErB4E,KAAK,SA0FvB,cAAC,EAAD,CACEpG,MAAOA,EACPM,cA1Ia,SAAS+G,GAC9BrH,EAAMsE,SAAQ,SAAAnE,GACRA,EAAKC,OAASiH,EAEhB7D,EAASnC,QAAQqC,UAAUvD,EAAKC,MAAMkH,KAAKC,MAAQ,EAGnD/D,EAASnC,QAAQqC,UAAUvD,EAAKC,MAAMkH,KAAKC,MAAQ,QAoI/ChH,YA/HU,SAASiH,GAC3BxH,EAAMsE,SAAQ,SAAAnE,GACRA,EAAKC,OAASoH,EAEhBhE,EAASnC,QAAQqC,UAAUvD,EAAKC,MAAMkH,KAAKC,MAAQ,EAGnD/D,EAASnC,QAAQqC,UAAUvD,EAAKC,MAAMkH,KAAKC,MAAQ,MAyH/C9G,UApHQ,WAChBT,EAAMsE,SAAQ,SAAAnE,GACZqD,EAASnC,QAAQqC,UAAUvD,EAAKC,MAAMkH,KAAKC,MAAQ,e,MClI1CE,MAff,SAAiBzI,GAQf,OACE,wBAAQC,UAAU,UAAUI,QALV,WAClBL,EAAM0I,gBAAgB1I,EAAMqG,KAI5B,SACGrG,EAAMmI,S,MCmEEQ,MAxEf,WAAgB,MAE0BhI,mBAAS,MAFnC,mBAEPiI,EAFO,KAEOF,EAFP,OAGY/H,mBAAS,IAHrB,mBAGPkI,EAHO,KAGAC,EAHA,KA4Cd,OAlBA7G,qBAAU,WAER,IAAMyE,EAAkB,IAAIC,gBAa5B,OAZgB,uCAAG,WAAeT,GAAf,iBAAAC,EAAA,+EAEQC,MAAM,GAAD,OAAItC,EAAJ,WAFb,cAETyC,EAFS,gBAGSA,EAASC,OAHlB,OAGTuC,EAHS,OAIfD,EAASC,GAJM,kDAMVrC,EAAgBJ,OAAO0C,SAC1BvB,QAAQC,IAAR,MAPa,0DAAH,qDAWhBuB,CAAWvC,EAAgBJ,QACpB,kBAAMI,EAAgBE,WAC5B,IAGD,sBAAK3G,UAAU,OAAf,UACE,cAAC,IAAD,CAAMiJ,GAAG,SAAT,SACE,wBAAQjJ,UAAU,UAAlB,qBAEF,4DACA,0BAASoG,GAAG,WAAZ,UACE,kUAOA,mBAAGA,GAAG,aAAN,+LAODwC,EAAM3H,KAAI,SAAAiI,GACT,OA7Dc,SAASA,GAC3B,OAAIA,EAAK9C,KAAOuC,EAEZ,cAAC,EAAD,CACAT,MAAOgB,EAAKhB,MACZ9B,GAAI8C,EAAK9C,IACJ8C,EAAK9C,IAKV,cAAC,EAAD,CACE8B,MAAOgB,EAAKhB,MACZ9B,GAAI8C,EAAK9C,GACTqC,gBAAiBA,GACZS,EAAKhB,MAAQgB,EAAK9C,IA8ClB+C,CAAYD,U,cCbZE,MAzDf,SAAwBrJ,GAAQ,IAAD,EACuBW,mBAAwB,QAAfX,EAAMsJ,MADtC,mBACtBC,EADsB,KACFC,EADE,KAGvBC,EAAoB,WACxBD,GAAsB,IAGlBE,EAAuB,WAC3BF,GAAsB,IA0CxB,OACE,qBAAKvJ,UAAU,iBAAf,SAvCmB,QAAfD,EAAMsJ,KAGN,uBACEK,KAAK,OACLC,OAAO,UACPxI,KAAK,YACLyI,SAAU7J,EAAM8J,iBAChBC,UAAQ,IAKHR,GAAqC,SAAfvJ,EAAMsJ,KAEnC,sBAAKrJ,UAAU,qBAAf,UACE,uBACE0J,KAAK,OACLC,OAAO,UACPxI,KAAK,YACLyI,SAAU7J,EAAM8J,iBAChBC,UAAQ,IAEV,wBAAQ9J,UAAU,aAAaI,QAASqJ,EAAxC,6CASF,wBAAQC,KAAK,SAAStJ,QAASoJ,EAA/B,mC,uBCOOO,MAlDf,SAAqBhK,GAEnB,IAIMiK,EAAmB,SAASpH,GAChC7C,EAAMkK,WAAWlK,EAAMmK,MAAOtH,EAAEE,OAAO3B,KAAMyB,EAAEE,OAAOwF,QAWxD,OACE,sBAAKtI,UAJuB,SAApBD,EAAMmB,KAAKmI,KAAkB,wBAA0B,cAI/D,UACE,oBAAIrJ,UAAU,cAAd,wBAAqCD,EAAMmK,MAAQ,KACnD,uBACER,KAAK,OACLvI,KAAK,OACLnB,UAAU,aACVmK,YAAY,OACZ7B,MAAOvI,EAAMmB,KAAKC,KAClByI,SAAUI,EACVF,UAAQ,IAEV,uBACEJ,KAAK,OACLvI,KAAK,UACLnB,UAAU,2BACVmK,YAAY,UACZ7B,MAAOvI,EAAMmB,KAAKE,QAClBwI,SAAUI,EACVF,UAAQ,IAEV,wBAAQJ,KAAK,SAAS1J,UAAU,kBAAkBI,QArCnC,WACjBL,EAAMqK,WAAWrK,EAAMmK,QAoCrB,SACE,cAAC,IAAD,MAEF,cAAC,EAAD,CACEb,KAAMtJ,EAAMmB,KAAKmI,KACjBQ,iBAlCmB,SAASjH,GAChC7C,EAAMkK,WAAWlK,EAAMmK,MAAOtH,EAAEE,OAAO3B,KAAMyB,EAAEE,OAAOuH,MAAM,W,wCC+UjDC,MAvVf,SAAkBvK,GAEhB,IAAMwK,EAAU,WACd,MAAO,CACLpJ,KAAM,GACNC,QAAS,GACTiG,UAAW,GACXgC,KAAM,MACNmB,IAAKC,QARc,EAqDG/J,oBAAS,kBA7BX,WAGtB,GAAKX,EAAM2K,cAEJ,CAIL,IAHA,IAAIC,EAAY,YAAO5K,EAAM2K,eAGpBE,EAAI,EAAGA,EAAI7K,EAAM8K,aAAN,eAAsCD,IACpDD,EAAaC,IAAMA,IAAMD,EAAaC,GAAb,YAG3BD,EAAazD,OAAO0D,EAAG,EAvBrB,CACLxE,IAHsB0E,EAyBiBH,EAAaC,IAtBtCxE,GACdjF,KAAM2J,EAAU3J,KAChBC,QAAS0J,EAAU1J,QACnBiG,UAAW,WACXgC,KAAM,OACNmB,IAAKC,QAoBFE,EAAazD,OAAO0D,EAAG,EAAGL,KAG9B,OAAOI,EAfP,MAAO,CAACJ,KAhBM,IAASO,EAyCcC,MArDlB,mBAqDhBhK,EArDgB,KAqDTqD,EArDS,OAsDG1D,oBAAS,iBAJH,SAAtBX,EAAMiL,YAAyBjL,EAAM8K,aAAa3C,MAAQ,MAlD7C,mBAsDhBA,EAtDgB,KAsDT+C,EAtDS,KAwEjBb,EAAa,SAASF,GAE1B,GAAInJ,EAAMC,OAAS,EAAG,CACpB,IAAMkK,EAAWnK,EACjBmK,EAAShE,OAAOgD,EAAO,GACvB9F,EAAS,YAAI8G,MAIXjB,EAAa,SAASC,EAAOiB,EAAUC,GAC3C,IAAMF,EAAWnK,EAEjBmK,EAAShB,GAAOiB,GAAYC,EAC5BhH,EAAS,YAAI8G,KAGTG,EAAyB,SAASC,GACtCvL,EAAMwL,aAAY,SAAAC,GAKhB,OAJAA,EAAW,GACXF,EAAajG,SAAQ,SAAAnE,GACnBsK,EAAStK,EAAKC,MAAQ,CAACsK,SAAS,EAAOpC,KAAMnI,EAAKmI,KAAMqC,cAAe,OAElE,eAAIF,OAITG,EAAkB,SAASzK,GAC/BnB,EAAMwL,aAAY,SAAAC,GAEhB,OADAA,EAAStK,EAAKC,MAAMsK,SAAU,EACvB,eAAID,OAYTI,EAAsB,WAC1B,IAAMC,EATiB,WACvB,IAAMX,EAAW/F,OAAOC,OAAOrF,EAAM2K,eAG/BoB,EAAkB/K,EAAMgL,QAAO,SAAA7K,GAAI,OAAIA,EAAKkF,MAAInF,KAAI,SAAAC,GAAI,OAAIA,EAAKkF,MACvE,OAAO8E,EAASa,QAAO,SAAA7K,GAAI,OAAK4K,EAAgBE,SAAS9K,EAAKkF,OAIxC6F,GACtBlM,EAAMwL,aAAY,SAAAC,GAKhB,OAHAK,EAAcxG,SAAQ,SAAAnE,GACpBsK,EAAStK,EAAKC,MAAQ,CAACsK,SAAS,EAAOpC,KAAM,cAExC,eAAImC,MAEbK,EAAcxG,SAAQ,SAAAnE,GACpBgL,EAAoBnM,EAAM8K,aAAazE,GAAIlF,OAMzCiL,EAAmB,uCAAG,WAAeC,GAAf,SAAAlG,EAAA,6DAC1BnG,EAAMsM,eAAe,eADK,kBAGDC,IAAM,CAC3BC,OAAQ,SACRxF,IAAI,GAAD,OAAKlD,EAAL,kBAAqB9D,EAAM8K,aAAazE,IAC3CoG,QAAS,CAAEC,cAAc,UAAD,OAAY1M,EAAM2M,QAC1CC,YAAaP,EAAc,GAAGM,MAC9BE,QAAS,MARa,OAUA,MAVA,OAUXC,SACX9M,EAAM+M,aAAa,aACnB/M,EAAMsM,eAAe,SAZC,gDAexBtM,EAAM+M,aAAa,mBAfK,yDAAH,sDAmBnBZ,EAAmB,uCAAG,WAAea,EAAQ7L,GAAvB,SAAAgF,EAAA,+EAEDoG,IAAM,CAC3BC,OAAQ,SACRxF,IAAI,GAAD,OAAKlD,EAAL,kBAAqBkJ,EAArB,kBAAqC7L,EAAKkF,IAC7CoG,QAAS,CAAEC,cAAc,UAAD,OAAY1M,EAAM2M,QAC1CE,QAAS,MANa,OASA,MATA,OASXC,QACXlB,EAAgBzK,GAVM,gDAaxBsG,QAAQC,IAAR,MAbwB,yDAAH,wDAiBnBuF,EAAQ,uCAAG,WAAeD,EAAQ7L,EAAM+L,EAAUC,GAAvC,iBAAAhH,EAAA,6DAETqG,EAAwB,QAAdrL,EAAKmI,KAAiB,OAAS,QACzCjD,EAAoB,QAAdlF,EAAKmI,KAAiB,GAAKnI,EAAKkF,GAH7B,kBAKUkG,IAAM,CAC3BC,OAAQA,EACRxF,IAAI,GAAD,OAAKlD,EAAL,kBAAqBkJ,EAArB,kBAAqC3G,GACxC5B,KAAMyI,EACNT,QAAS,CAAEC,cAAc,UAAD,OAAY1M,EAAM2M,QAC1CC,YAAaO,EAAaR,MAC1BE,QAAS,MAXE,OAeW,MAfX,OAeAC,QACXlB,EAAgBzK,GAhBL,gDAmBa,QAAtBnB,EAAMiL,YACRjL,EAAM+M,aAAa,kBACW,SAAtB/M,EAAMiL,aACfjL,EAAM+M,aAAa,kBAtBP,yDAAH,4DA2BRK,EAAa,SAASjM,EAAM6L,EAAQG,GAExC,IAAMD,EAAW,IAAIG,SACrBH,EAASI,OAAO,OAAQnM,EAAKC,MAC7B8L,EAASI,OAAO,UAAWnM,EAAKE,SAChC6L,EAASI,OAAO,YAAanM,EAAKmG,WAClC4F,EAASI,OAAO,UAAWN,GAC3BE,EAASI,OAAO,cAAetM,EAAMuM,QAAQpM,IAE7C8L,EAASD,EAAQ7L,EAAM+L,EAAUC,IAG7BK,EAAQ,uCAAG,WAAeC,EAAUN,GAAzB,iBAAAhH,EAAA,6DAETqG,EAAgC,QAAtBxM,EAAMiL,YAAwB,OAAS,QACjD5E,EAA4B,QAAtBrG,EAAMiL,YAAwB,GAAKjL,EAAM8K,aAAazE,GAHnD,kBAKAkG,IAAM,CACjBC,OAAQA,EACRxF,IAAI,GAAD,OAAKlD,EAAL,kBAAqBuC,GACxB5B,KAAMgJ,EACNhB,QAAS,CAAEC,cAAc,UAAD,OAAY1M,EAAM2M,QAC1CC,YAAaO,EAAaR,MAC1BE,QAAS,MAXE,wEAeW,aAApB7M,EAAM0N,UACR1N,EAAM+M,aAAa,kBACU,aAApB/M,EAAM0N,WACf1N,EAAM+M,aAAa,kBAErBtF,QAAQC,IAAR,MApBa,yDAAH,wDAwBRiG,EAAU,uCAAG,WAAetB,GAAf,iBAAAlG,EAAA,6DAEjBmF,EAAuBtK,GAEnBhB,EAAM2K,eACRkB,IAEF7L,EAAMsM,eAAe,aAGfmB,EAAW,IAAIJ,UACZC,OAAO,QAASnF,GACzBsF,EAASH,OAAO,iBAAkBtM,EAAMC,QAZvB,SAcMuM,EAASC,EAAUpB,EAAc,IAdvC,QAcX9F,EAdW,SAiBfvF,EAAMsE,SAAQ,SAACnE,EAAMgJ,GACnBiD,EAAWjM,EAAMoF,EAAS9B,KAAK4B,GAAIgG,EAAclC,EAAQ,OAlB5C,4CAAH,sDAqCVyD,EAAoB,WACHzL,OAAO0L,QAAQ,4CAEnC7N,EAAM+M,aAAa,eAgCtB,OAjBA9K,qBAAU,WAER,GAAwB,aAApBjC,EAAM0N,WAAgD,aAApB1N,EAAM0N,UAA0B,CAEpE,IAAMrB,EAAgBrL,EAAME,KAAI,kBAAMqL,IAAMuB,YAAYrI,YAExD4G,EAAc0B,KAAKxB,IAAMuB,YAAYrI,UACrCzF,EAAMgO,iBAAN,YAA2B3B,IAC3BsB,EAAWtB,QACN,GAAwB,eAApBrM,EAAM0N,UAA4B,CAC3C,IAAMrB,EAAgB,CAACE,IAAMuB,YAAYrI,UACzCzF,EAAMgO,iBAAN,UAA2B3B,IAC3BD,EAAoBC,MAGrB,CAACrM,EAAM0N,YAGR,uBAAMzN,UAAU,WAAWgO,SA7BR,SAASpL,GAC5BA,EAAEqL,iBAEwB,QAAtBlO,EAAMiL,YACRjL,EAAM+M,aAAa,YAEnB/M,EAAM+M,aAAa,aAuBrB,UACE,qBAAK9M,UAAU,YAAf,SACE,uBACE0J,KAAK,OACLvI,KAAK,QACLnB,UAAU,8BACVmK,YAAY,aACZ7B,MAAOJ,EACP0B,SAxPa,SAAShH,GAC5BqI,EAASrI,EAAEE,OAAOwF,YA0PfvH,EAAME,KAAI,SAACC,EAAMgJ,GAChB,OACE,cAAC,EAAD,CACEA,MAAOA,EAEPhJ,KAAMA,EACN+I,WAAYA,EACZG,WAAYA,GAHPlJ,EAAKsJ,QAOhB,sBAAKxK,UAAU,iBAAf,UACE,wBACE0J,KAAK,SACL1J,UAAU,aACVoG,GAAG,eACHhG,QAvQQ,WAEd,IAAM8N,EAAiB3D,IAEvB,OADAnG,GAAS,SAAArD,GAAK,4BAAQA,GAAR,CAAemN,OACtB3D,GA+PH,sBAQA,wBAAQb,KAAK,SAAS1J,UAAU,8BAA8BI,QApRlD,WAChBL,EAAMsM,eAAe,QACrBtM,EAAM+M,aAAa,SAkRf,oBA5EY,WAEhB,GAA0B,SAAtB/M,EAAMiL,YACR,OACE,wBAAQtB,KAAK,SAAS1J,UAAU,aAAaI,QAASuN,EAAtD,yBA2ECQ,GACD,uBAAOzE,KAAK,SAAS1J,UAAU,aAAasI,MApFlB,QAAtBvI,EAAMiL,YAAwB,cAAgB,uB,MCnO3CoD,MA9Bf,SAAyBrO,GAEvB,IAAMsO,EAAmB,WAEvB,MAA2B,QAAvBtO,EAAMmE,QAAQmF,KACT,CAACiF,QAAS,UAAWC,SAAU,UACN,SAAvBxO,EAAMmE,QAAQmF,KAChB,CAACiF,QAAS,WAAYC,SAAU,WACP,YAAvBxO,EAAMmE,QAAQmF,KAChB,CAACiF,QAAS,aAAcC,SAAU,kBADpC,GAeT,OACE,qBAAKvO,UAAU,kBAAf,SACE,sBAAMA,UAJeD,EAAMmE,QAAQuH,QAAU,WAAa,UAI1D,SAZE1L,EAAMmE,QAAQuH,QACV,GAAN,OAAU1L,EAAMO,SAAhB,aAA6B+N,IAAmBE,UAE1C,GAAN,OAAUxO,EAAMO,SAAhB,aAA6B+N,IAAmBC,c,MC8CvCE,MA7Df,SAAwBzO,GAkDtB,OACE,sBAAKC,UAAU,iBAAf,UACE,sBAAMA,UAAU,cAAhB,SAlDe,WACjB,OAAQD,EAAM0N,WACZ,IAAK,WACJ,MAAO,mBACR,IAAK,WACH,MAAO,mBACT,IAAK,aACH,MAAO,qBACT,QACE,MAAO,IAyCsBgB,KAC/B,sBAAKzO,UAAU,kBAAf,UArCsB,aAApBD,EAAM0N,WAAgD,aAApB1N,EAAM0N,UACnCtI,OAAOuJ,QAAQ3O,EAAMyL,UAAUvK,KAAI,SAAA0N,GACxC,OACE,cAAC,EAAD,CACErO,SAAUqO,EAAiB,GAC3BzK,QAASyK,EAAiB,IAF5B,UAGUA,EAAiB,GAH3B,YAQG,GA4BL,sBAAM3O,UAAU,iBAAhB,SAxBkB,WACtB,OAAQD,EAAM0N,WACZ,IAAK,YACH,MAAO,6BACT,IAAK,UACH,MAAO,4BACT,IAAK,YACH,MAAO,+BACT,IAAK,iBACH,MAAO,6CACT,IAAK,iBACL,MAAO,8CACP,IAAK,kBACH,MAAO,gDACT,QACE,MAAO,IAS2BmB,Y,MCoD3BC,MAzGf,SAAqB9O,GAAO,MAIMW,mBAAS,IAJf,mBAInB8K,EAJmB,KAITD,EAJS,KAMpBuD,EAAgB,WACpB/O,EAAMsM,eAAe,OACrBtM,EAAM+M,aAAa,aAuFrB,OAfA9K,qBAAU,WAEJmD,OAAOC,OAAOoG,GAAUuD,OAAM,SAAA7K,GAAO,OAAIA,EAAQuH,aAC3B,aAApB1L,EAAM0N,WACR1N,EAAM+M,aAAa,WACnB/M,EAAMsM,eAAe,SACQ,aAApBtM,EAAM0N,YACf1N,EAAM+M,aAAa,WACnB/M,EAAMsM,eAAe,YAIxB,CAACb,IAIF,qBAAKxL,UAAU,cAAf,SACE,sBAAKA,UAAU,oBAAf,UArCW,WAEb,GACwB,aAApBD,EAAM0N,WACc,aAApB1N,EAAM0N,WACc,aAApB1N,EAAM0N,WACc,eAApB1N,EAAM0N,UAER,OACE,wBACEzN,UAAU,aACVoG,GAAG,eACHhG,QAAS0O,EAHX,sBA6BCE,GAvFS,WACd,OAAQjP,EAAMiL,aAEZ,IAAK,MACH,OACE,cAAC,EAAD,CACE0B,MAAO3M,EAAM2M,MACbL,eAAgBtM,EAAMsM,eACtBd,YAAaA,EACbuB,aAAc/M,EAAM+M,aACpBW,UAAW1N,EAAM0N,UACjBzC,YAAY,MACZ+C,iBAAkBhO,EAAMgO,mBAG9B,IAAK,OACH,OACE,cAAC,EAAD,CACErB,MAAO3M,EAAM2M,MACbL,eAAgBtM,EAAMsM,eACtBd,YAAaA,EACbuB,aAAc/M,EAAM+M,aACpBW,UAAW1N,EAAM0N,UACjB5C,aAAc9K,EAAM8K,aACpBH,cAAe3K,EAAM2K,cACrBM,YAAY,OACZ+C,iBAAkBhO,EAAMgO,mBAK9B,IAAK,WACL,IAAK,cACH,OACE,cAAC,EAAD,CACEvC,SAAUA,EACVsB,aAAc/M,EAAM+M,aACpBW,UAAW1N,EAAM0N,YAGvB,QACE,OACE,sBAAMzN,UAAU,SAAhB,kDA8CDQ,S,uBC1CMyO,MA3Df,SAAkBlP,GAChB,IAoCMmP,EAAa,WACjBnP,EAAMoP,SAASpP,EAAMmJ,OAGvB,OACE,sBAAKlJ,UAAU,WAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,oBAAIA,UAAU,kBAAd,SAAiCD,EAAMmJ,KAAKhB,QAlC/B,WAEjB,OAAQnI,EAAM0N,WACZ,IAAK,WACL,IAAK,WACL,IAAK,aACL,IAAK,WACH,MAAO,GACT,QACE,OACE,wBAAQ/D,KAAK,SAAS1J,UAAU,WAAWI,QAAS8O,EAApD,SACE,cAAC,IAAD,OAwBHE,MAEH,sBAAKpP,UAAU,kBAAf,UACE,sBAAKA,UAAU,4BAAf,UACE,oBAAIA,UAAU,eAAd,mBACA,sBAAMA,UAAU,kBAAhB,UApBDD,EAAMsP,WAAatP,EAAMmJ,KAAN,eAA+BnJ,EAAMsP,UAAUrO,OAC/D,KAAN,OAAYjB,EAAMmJ,KAAN,eAAZ,cAEO,QAmBL,qBAAKlJ,UAAU,aAAf,SAnDQ,WAEZ,GAAID,EAAMsP,UACR,OAAOtP,EAAMsP,UAAUpO,KAAI,SAAAC,GACzB,OAAO,sBAAMlB,UAAU,YAAhB,SAA6CkB,EAAKC,MAAjBD,EAAKC,SA+ChBJ,Y,MC3BtBuO,MAzBf,SAA2BvP,GAkBzB,OACE,qBAAKC,UAAU,oBAAf,SAjBY,WAEZ,GAAImF,OAAOoK,KAAKxP,EAAMgB,OAAOC,OAAS,EACpC,OAAOjB,EAAM6I,MAAM3H,KAAI,SAAAiI,GACrB,OACE,cAAC,EAAD,CACEA,KAAMA,EACNmG,UAAWtP,EAAMgB,MAAMmI,EAAK9C,GAAGoJ,YAC/BL,SAAUpP,EAAMoP,SAEhB1B,UAAW1N,EAAM0N,WADZvE,EAAK9C,OASfwC,M,MCiEQ6G,MAjFf,SAAe1P,GAAQ,IAAD,EACMW,mBAAS,IADf,mBACbkI,EADa,KACNC,EADM,OAEMnI,mBAAS,IAFf,mBAEbK,EAFa,KAENqD,EAFM,OAGkB1D,mBAAS,QAH3B,mBAGbsK,EAHa,KAGAqB,EAHA,OAMc3L,mBAAS,QANvB,mBAMb+M,EANa,KAMFX,EANE,OAOoBpM,mBAAS,MAP7B,mBAObmK,EAPa,KAOC6E,EAPD,OAQsBhP,mBAAS,MAR/B,mBAQbgK,EARa,KAQEiF,EARF,OASsBjP,mBAAS,IAT/B,mBASb0L,EATa,KASE2B,EATF,KAkBd6B,EAAS,uCAAG,WAAe3J,GAAf,iBAAAC,EAAA,+EAGSC,MAAM,GAAD,OAAItC,EAAJ,UAAoB,CAC9C2I,QAAS,CAAEC,cAAc,UAAD,OAAY1M,EAAM2M,QAC1CrG,OAAQJ,IALI,cAGRK,EAHQ,gBAOcA,EAASC,OAPvB,OAORsJ,EAPQ,OAQdhH,EAASgH,EAAcjH,OACvBxE,EAASyL,EAAc9O,OATT,kDAWTkF,EAAsB8C,SACzBvB,QAAQC,IAAR,MAZY,0DAAH,sDAmCf,OAjBAzF,qBAAU,WAER,GACkB,aAAdyL,GACc,aAAdA,GACc,aAAdA,GACc,eAAdA,EACA,CACF,IAAMhH,EAAkB,IAAIC,gBAE5B,OADAkJ,EAAUnJ,EAAgBJ,QACnB,kBAAMI,EAAgBE,SAG/B,OAAO,kBAAMyF,EAAc/G,SAAQ,SAAAG,GAAM,OAAIA,EAAOsK,eAEnD,CAACrC,IAGF,sBAAKzN,UAAU,QAAf,UACE,cAAC,IAAD,CAAMiJ,GAAG,IAAT,SACE,wBAAQjJ,UAAU,UAAlB,oBAEF,sBAAKA,UAAU,mBAAf,UACE,cAAC,EAAD,CACE4I,MAAOA,EACP7H,MAAOA,EACPoO,SAnDS,SAASjG,GACxBwG,EAAgBxG,GAChByG,EAAiB5O,EAAMmI,EAAK9C,GAAGoJ,aAC/BnD,EAAe,QACfS,EAAa,aAgDPW,UAAWA,IAEb,cAAC,EAAD,CACEA,UAAWA,EACXX,aAAcA,EACd9B,YAAaA,EACbqB,eAAgBA,EAChBxB,aAAcA,EACdH,cAAeA,EACfgC,MAAO3M,EAAM2M,MACbqB,iBAAkBA,WCrEbgC,MARf,SAAqBhQ,GAGnB,OAAQA,EAAM2M,MAAQ,cAAC,EAAD,CAAOA,MAAO3M,EAAM2M,QAAW,cAAC,IAAD,CAAUzD,GAAG,Y,cCuFrD+G,MAxFf,SAAejQ,GAAO,MAGYW,oBAAS,GAHrB,mBAGbuP,EAHa,KAGHC,EAHG,OAIoCxP,oBAAS,GAJ7C,mBAIbyP,EAJa,KAISC,EAJT,OAMY1P,mBAAS,CACvC2P,SAAU,GACVC,SAAU,KARQ,mBAMbC,EANa,KAMHC,EANG,KAWdC,EAAe,SAAS7N,GAC5B4N,EAAY,2BAAID,GAAL,kBAAgB3N,EAAEE,OAAO3B,KAAOyB,EAAEE,OAAOwF,UAuCtD,OAAI2H,EACK,cAAC,IAAD,CAAUhH,GAAG,WAGlB,sBAAKjJ,UAAU,0BAAf,UAEI,sBAAMoG,GAAG,gCAAT,SATE+J,EAAuB,mDAAqD,KAY9E,uBAAMnC,SA7CO,SAASpL,GAC5BA,EAAEqL,iBAGF,IAAMyC,EAAS,IAAItD,SACnBsD,EAAOrD,OAAO,WAAYkD,EAASD,UACnCI,EAAOrD,OAAO,WAAYkD,EAASF,UAEnClK,MAAM,GAAD,OAAItC,EAAJ,UAAoB,CACvB0I,OAAQ,OACRoE,KAAMD,IAEPpL,MAAK,SAAAgB,GACJ,OAAOA,EAASC,UAEjBjB,MAAK,SAAAsL,GAG2B,MAA3BA,EAAgB/D,QAClBgE,aAAaC,QAAQ,QAASF,EAAgBlE,OAC9C3M,EAAMgR,SAASH,EAAgBlE,OAC/BwD,GAAY,IAEwB,MAA3BU,EAAgB/D,QACzBuD,GAAwB,MAG3BY,OAAM,SAAAC,GACLzJ,QAAQC,IAAIwJ,OAiBR,UACE,uBAAOC,QAAQ,WAAf,sBACA,uBACExH,KAAK,OACLtD,GAAG,WACHjF,KAAK,WACLnB,UAAU,aACVsI,MAAOiI,EAASF,SAChBzG,SAAU6G,EACV3G,UAAQ,IAEV,uBAAOoH,QAAQ,WAAf,sBACA,uBACExH,KAAK,WACLtD,GAAG,WACHjF,KAAK,WACLnB,UAAU,aACVsI,MAAOiI,EAASD,SAChB1G,SAAU6G,EACV3G,UAAQ,IAEV,uBAAOJ,KAAK,SAAS1J,UAAU,aAAasI,MAAM,kB,MClE/C6I,MAbf,WAAgB,IAAD,EACazQ,mBAASmQ,aAAaO,QAAQ,UAD3C,mBACN1E,EADM,KACCqE,EADD,KAEb,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,IAAIC,UAAW7I,IACjC,cAAC,IAAD,CAAO4I,KAAK,SAASE,OAAQ,SAACzR,GAAD,OAAW,cAAC,EAAD,2BAAiBA,GAAjB,IAAwB2M,MAAOA,QACvE,cAAC,IAAD,CAAO4E,KAAK,SAASE,OAAQ,SAACzR,GAAD,OAAW,cAAC,EAAD,2BAAWA,GAAX,IAAkBgR,SAAUA,cCT5EU,IAASD,OACP,cAAC,IAAME,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a394445e.chunk.js","sourcesContent":["import \"../style/PreferenceBtn.css\";\n\nfunction PreferenceBtn(props) {\n\n  const classList = function() {\n    const selected = (props.selected ? \" selected\" : \"\")\n    if (props.role === \"full-choir\") {\n      return \"PreferenceBtn full-choir\" + selected\n    } else {\n      return \"PreferenceBtn\" + selected\n    }\n  }\n\n  const handleClick = function() {\n    //Call either emphasizePart or isolatePart\n    props.handler(props.partName)\n    //Apply the \"selected\" className by setting selectedPreference in state\n    props.setSelectedPreference({\n      role: props.role,\n      partName: props.partName\n    });\n  }\n\n  return (\n    <button className={classList()} onClick={handleClick}>\n      {props.content}\n    </button>\n  )\n}\n\nexport default PreferenceBtn;","import { useState } from \"react\";\nimport PreferenceBtn from \"./PreferenceBtn.js\";\nimport \"../style/Preferences.css\";\n\nfunction Preferences(props) {\n  const [selectedPreference, setSelectedPreference] = useState({\n    role: \"full-choir\",\n    partName: null\n  });\n  \n  const isSelected = function(role, partName) {\n    if (selectedPreference.role === \"full-choir\" && role === \"full-choir\") {\n      return true\n    } else if (selectedPreference.role === role && selectedPreference.partName === partName) {\n      return true\n    } else {\n      return false\n    }\n  }\n  \n  return (\n    <div \n      className=\"Preferences\" \n      style={{gridTemplateColumns: `repeat (${props.parts.length}, auto)`}}\n    >  \n      \n        <span>Emphasize</span>\n        {props.parts.map(part => {\n          return (\n            <PreferenceBtn \n              key={`emphasize-${part.name}`}\n              partName={part.name}\n              content={part.initial}\n              role=\"emphasize\" \n              handler={props.emphasizePart}\n              selected={isSelected(\"emphasize\", part.name)}\n              setSelectedPreference={setSelectedPreference}\n            />\n          )\n        })}\n   \n        <span>Isolate</span>\n        {props.parts.map(part => {\n          return (\n            <PreferenceBtn \n              key={`isolate-${part.name}`}\n              partName={part.name}\n              content={part.initial}\n              role=\"isolate\" \n              handler={props.isolatePart}\n              selected={isSelected(\"isolate\", part.name)}\n              setSelectedPreference={setSelectedPreference}\n            />\n          )\n        })}\n\n        <div \n          className=\"full-choir-container\"\n          style={{gridColumn: `2 / ${props.parts.length + 2}`}}\n        >\n          <PreferenceBtn \n            onClick={props.fullChoir}\n            selected={isSelected(\"full-choir\")}\n            role={\"full-choir\"}\n            content=\"Full Choir\"\n            handler={props.fullChoir}\n            setSelectedPreference={setSelectedPreference}\n          />\n        </div>\n    </div>\n  )\n}\n\nexport default Preferences;","import {useRef, useState, useEffect} from \"react\";\nimport \"../style/ProgressMeter.css\"\n\nfunction ProgressMeter(props) {\n  \n  \n  const [progressWidth, setProgressWidth] = useState(0);\n  const [meterWidth, setMeterWidth] = useState(0);\n  let meterRef = useRef();\n\n  const updateProgress = function() {\n    // Set new width of progress bar based on fraction of track completed\n    const newProgress = (props.timestamp / props.duration) * meterWidth;\n    setProgressWidth(newProgress);\n  }\n\n  const handleSeek = function(e) {\n    const rect = e.target.getBoundingClientRect();\n    const clickPosition = e.clientX - rect.x;\n    //Seek track to new timestamp based on click position within the meter\n    const newTimestamp = (clickPosition / meterWidth) * props.duration;\n    props.seekTrack(newTimestamp);\n  }\n\n    useEffect(() => {\n      //Get the actual width of the progressMeter\n      const computedWidth = (\n        window.getComputedStyle(meterRef.current).getPropertyValue(\"width\")\n      )\n      //Get rid of \"px\" and convert to Integer\n      setMeterWidth(parseInt(computedWidth.slice(0, 3)));\n    // eslint-disable-next-line\n    }, [])\n\n    //Update position of progress bar every time the timestamp updates\n    // eslint-disable-next-line\n    useEffect(updateProgress, [props.timestamp])\n\n  \n  return (\n    <div className=\"ProgressMeter\" ref={meterRef} onClick={handleSeek}>\n      <div className=\"progress-bar\" style={{width: progressWidth}}></div>\n    </div>\n  )\n}\n\nexport default ProgressMeter;","import ProgressMeter from \"./ProgressMeter.js\";\nimport PlayIcon from \"@material-ui/icons/PlayArrowRounded\";\nimport PauseIcon from \"@material-ui/icons/PauseRounded\";\nimport ResetIcon from \"@material-ui/icons/ReplayRounded\";\nimport \"../style/Controls.css\";\n\nfunction Controls(props) {\n  const handleKeyUp = function(e) {\n    if (e.keyCode === 32) {\n      props.pauseTrack();\n    }\n  }\n\n  const playOrPauseBtn = function() {\n    if (props.playing) {\n      return (\n      <button \n        className=\"control-btn\" \n        onClick={props.pauseTrack}\n        onKeyUp={handleKeyUp}\n      >\n        <PauseIcon />\n      </button>\n      )\n    } else {\n      return (\n      <button \n        className=\"control-btn\" \n        onClick={props.playTrack}\n      >\n        <PlayIcon />\n      </button>\n      )\n    }\n  }\n\n  return (\n    <div className=\"Controls\">\n      <button className=\"control-btn\" onClick={props.resetTrack}>\n        <ResetIcon />\n      </button>\n      {playOrPauseBtn()}\n      <div className=\"progress-meter-container\">\n        <ProgressMeter \n          seekTrack={props.seekTrack} \n          duration={props.duration}\n          timestamp={props.timestamp}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Controls;","export const apiUrl = \"https://choral-tracks.herokuapp.com/api\"","import { useState, useEffect, useRef } from \"react\";\nimport LoadingMask from \"react-loadingmask\";\nimport \"react-loadingmask/dist/react-loadingmask.css\";\nimport Preferences from \"././Preferences.js\"\nimport Controls from \"./Controls.js\";\nimport \"../style/Song.css\";\nimport { apiUrl } from \"../apiUrl.js\";\n\n\nfunction Song(props) {\n  //Set duration to an arbitrarily long amount of time until song loads\n  const [duration, setDuration] = useState(10000);\n  const [timestamp, setTimestamp] = useState(0);\n  const [playing, setPlaying] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [parts, setParts] = useState([])\n  const [seekingWhilePlaying, setSeekingWhilePlaying] = useState(false);\n  let audioRef = useRef({\n    data: {},\n    gainNodes: {},\n    sourceNodes: {},\n    loaded: {}\n  });\n  const ctxRef = useRef({\n    ctx: new (window.AudioContext || window.webkitAudioContext)(),\n    time: 0\n  })\n\n  const updaterRef = useRef();\n\n  const convertUrlToMp3 = function(url) {\n    const splitArray = url.split(\".\");\n    //Replace last element of split array (the current extension)\n    //with 'mp3'\n    splitArray.splice((splitArray.length - 1), 1, 'mp3')\n    return splitArray.join(\".\");\n  }\n\n  const getData = function(part) {\n    //Convert extension to .mp3 before fetching from Cloudinary\n    const myRequest = new Request(convertUrlToMp3(part.recording));\n    return fetch(myRequest)\n    .then(response => {\n      return response.arrayBuffer();\n    })\n    .then(buffer => {\n        return ctxRef.current.ctx.decodeAudioData(buffer, decodedData => {\n          audioRef.current.loaded[part.name] = true\n          console.log(part.name, \"loaded\")\n          if (allLoaded()) {setLoading(false)}\n          return decodedData;\n      });\n    })\n  }\n\n  const allLoaded = function() {\n    //Check if all the parts have been recorded as loaded\n    return (Object.values(audioRef.current.loaded).length === parts.length)\n  }\n\n  const playData = function(part) {\n    audioRef.current.data[part.name].then(decodedData => {\n      // Create source node\n      const source = ctxRef.current.ctx.createBufferSource();\n      // Store the source in the sourcesRef\n      audioRef.current.sourceNodes[part.name] = source\n      // Wire up the data\n      source.buffer = decodedData;\n      // Connect the source node to the gain node (which controls the volume)\n      source.connect(audioRef.current.gainNodes[part.name]);\n      // Connect the gain node to the destination (e.g., speakers) and start the audio\n      audioRef.current.gainNodes[part.name].connect(ctxRef.current.ctx.destination);\n      source.start(0, timestamp)\n    })\n  }\n\n  const playTrack = function() {\n    if (playing) {\n      return\n    }\n    parts.forEach(part => {\n      playData(part);\n    });\n    //Indicate that play has begun\n    setPlaying(true);\n  }\n\n  const pauseTrack = function() {\n    if (playing) {\n      parts.forEach(part => {\n        audioRef.current.sourceNodes[part.name].stop();\n      });\n      //Indicate that playing has stopped\n      setPlaying(false);\n    }\n  }\n\n  const resetTrack = function() {\n    pauseTrack();\n    setTimestamp(0); \n  }\n\n  const seekTrack = function(newTimestamp) {\n    if (playing) {\n      setSeekingWhilePlaying(true);\n    }\n    pauseTrack();\n    setTimestamp(newTimestamp);\n    //Allow useEffect to restart\n  }\n\n  //Execute when seekingWhilePlaying state changes\n  useEffect(() => {\n    if (seekingWhilePlaying) {\n      //Restart the track after seek\n      playTrack();\n      setSeekingWhilePlaying(false);\n    }\n    //eslint-disable-next-line\n   }, [seekingWhilePlaying]);\n\n   const emphasizePart = function(emphasizedPart) {\n    parts.forEach(part => {\n      if (part.name === emphasizedPart) {\n        //Set part to be emphasized at full volume\n        audioRef.current.gainNodes[part.name].gain.value = 1\n      } else {\n        //Set the rest of the parts at a low volume\n        audioRef.current.gainNodes[part.name].gain.value = .15;\n      }\n    })\n  }\n\n  const isolatePart = function(isolatedPart) {\n    parts.forEach(part => {\n      if (part.name === isolatedPart) {\n        //Set part to be isolated at full volume\n        audioRef.current.gainNodes[part.name].gain.value = 1\n      } else {\n        //Mute the rest of the parts\n        audioRef.current.gainNodes[part.name].gain.value = 0;\n      }\n    })\n  }\n\n  const fullChoir = function() {\n    parts.forEach(part => {\n      audioRef.current.gainNodes[part.name].gain.value = 1;\n    })\n  }\n\n  const createUpdaterInterval = function() {\n    return setInterval(() => {\n      const timeElapsedSinceLastUpdate = (\n        ctxRef.current.ctx.currentTime - ctxRef.current.previousTime\n      );\n      //Bring the time property up to date with the currentTime\n      ctxRef.current.previousTime = ctxRef.current.ctx.currentTime;\n      setTimestamp(t => t + timeElapsedSinceLastUpdate);\n    }, 250);\n  }\n\n  const getCapitalizedPartsString = function() {\n    const capitalizedArray = parts.map(part => {\n      const partName = part.name;\n      return partName.charAt(0) + partName.slice(1);\n    })\n    return capitalizedArray.join(\", \")\n  }\n\n  const loadParts = async function(abortControllerSignal) {\n    //GET songs from Rails API\n    const response = await fetch(`${apiUrl}/songs/${props.id}/parts`, {\n      signal: abortControllerSignal\n    });\n    const partsData = await response.json();\n    setParts(partsData)\n  }\n\n  //Load parts on ComponentDidMount\n  useEffect(() => {\n    const abortController = new AbortController();\n    const sourceNodes = audioRef.current.sourceNodes;\n    loadParts(abortController.signal);\n\n    //Abort fetch and pause track on ComponentWillUnmount\n    return () => {\n      abortController.abort();\n      Object.values(sourceNodes).forEach(node => node.stop())\n    };\n  // eslint-disable-next-line\n  }, [])\n\n  //Execute once the parts data have loaded\n  useEffect(() => {\n    if (parts.length > 0) {\n      parts.forEach(part => {\n        //Load audio for each part\n        audioRef.current.data[part.name] = getData(part)\n        //Create a gain (volume) node for each part\n        audioRef.current.gainNodes[part.name] = ctxRef.current.ctx.createGain();\n      });\n      //Once loaded, select the first part arbitrarily and set the duration\n      Object.values(audioRef.current.data)[0].then(buffer => setDuration(buffer.duration));\n    }\n  // eslint-disable-next-line\n  }, [parts])\n\n  //Execute when playing state changes\n  useEffect(() => {\n    if (playing) {\n      //Before the updater Interval starts, bring the time up to date with the\n      //Audio Context's currentTime\n      ctxRef.current.previousTime = ctxRef.current.ctx.currentTime;\n      updaterRef.current = createUpdaterInterval();\n    } else {\n      clearInterval(updaterRef.current);\n    }\n    return () => clearInterval(updaterRef.current);\n    // eslint-disable-next-line\n  }, [playing])\n\n  //Execute when the timestamp updates\n  useEffect(() => {\n    //If the timestamp exceeds duration of the track,\n    //stop the track and reset the timestamp to 0\n    if (timestamp > duration) {\n      resetTrack();\n    }\n    // eslint-disable-next-line\n  }, [timestamp])\n\n  const loadingMessage = function() {\n    if (loading) {\n      return \"Loading song (this might take a bit)\"\n    } else {\n      return \"\"\n    }\n  }\n\n  return (\n      <div className=\"Song\">\n        <h2 className=\"song-title\">{props.title}</h2>\n        <span className=\"loading-message\">{loadingMessage()}</span>\n        <LoadingMask loading={loading}>\n          <Controls\n            playTrack={playTrack}\n            resetTrack={resetTrack}\n            pauseTrack={pauseTrack}\n            seekTrack={seekTrack}\n            timestamp={timestamp}\n            duration={duration}\n            playing={playing}\n          />\n          <span className=\"parts\">\n            {`Parts: ${getCapitalizedPartsString()}`}\n          </span>\n          <Preferences \n            parts={parts}\n            emphasizePart={emphasizePart}\n            isolatePart={isolatePart}\n            fullChoir={fullChoir} \n          />\n          </LoadingMask>\n        \n      </div>\n  )\n}\n\nexport default Song;","import \"../style/SongBtn.css\";\n\nfunction SongBtn(props) {\n\n  \n\n  const handleClick = function() {\n    props.setSelectedSong(props.id);\n  }\n\n  return (\n    <button className=\"SongBtn\" onClick={handleClick}>\n      {props.title}\n    </button>\n  )\n}\n\nexport default SongBtn;\n","import { useState, useEffect } from \"react\"\nimport { Link } from \"react-router-dom\";\nimport Song from \"./Song.js\";\nimport SongBtn from \"./SongBtn.js\";\nimport {apiUrl} from \"../apiUrl.js\";\nimport \"../style/Home.css\";\n\nfunction Home() {\n  //Store id of selected song\n  const [selectedSong, setSelectedSong] = useState(null);\n  const [songs, setSongs] = useState([])\n\n  const songContent = function(song) {\n    if (song.id === selectedSong) {\n      return (\n        <Song \n        title={song.title}\n        id={song.id}\n        key={song.id}\n      />\n      )\n    } else {\n      return (\n        <SongBtn \n          title={song.title}\n          id={song.id}\n          setSelectedSong={setSelectedSong}\n          key={song.title + song.id}\n        />\n      )\n    }\n  }\n  \n  useEffect(() => {\n    //On ComponentDidMount, fetch the songs index to create the list index\n    const abortController = new AbortController();\n    const fetchSongs = async function(abortControllerSignal) {\n      try {\n        const response = await fetch(`${apiUrl}/songs`)\n        const songsData = await response.json();\n        setSongs(songsData)\n      } catch(err) {\n        if (!abortController.signal.aborted) {\n          console.log(err)\n        }\n      }\n    }\n    fetchSongs(abortController.signal)\n    return () => abortController.abort();\n  }, [])\n\n  return (\n    <div className=\"Home\">\n      <Link to=\"/admin\">\n        <button className=\"nav-btn\">Admin</button>\n      </Link>\n      <h1>Holy Transfiguration Choir</h1>\n      <section id=\"overview\">\n        <p >\n          Welcome to the HT choral resources!\n          Hopefully, there will be a lot more to come, but for right now,\n          check out the song player below. If you click on one of the titles,\n          you can play the song with options to hear your part by itself (\"isolate\"),\n          or with the other parts softer (\"emphasize\").\n        </p>\n        <p id=\"disclaimer\">\n          NB: &ensp; This player ain't gonna work on a mobile device. &nbsp;\n          Also, you may find that you get the best experience using headphones,\n          especially when selecting \"emphasize\".\n        </p>\n      </section>\n      \n      {songs.map(song => {\n        return songContent(song);\n      })}\n    </div>\n  );\n}\n\nexport default Home;\n\n\n","import { useState } from \"react\";\nimport \"../style/RecordingInput.css\"\n\nfunction RecordingInput(props) {\n  const [acceptNewRecording, setAcceptNewRecording] = useState(props.mode === \"new\");\n\n  const overrideRecording = function() {\n    setAcceptNewRecording(true)\n  }\n\n  const revertToOldRecording = function() {\n    setAcceptNewRecording(false)\n  }\n\n  const content = function() {\n    if (props.mode === \"new\") {\n      //If we are creating a new song, display button to upload new recording\n      return (\n        <input \n          type=\"file\" \n          accept=\"audio/*\"\n          name=\"recording\" \n          onChange={props.handleFileUpload}\n          required\n        />\n      )\n      //If we are overriding the old recording, display button to upload new recording,\n      //but also button to revert to back to the old one\n    } else if (acceptNewRecording && props.mode === \"edit\") {\n      return (\n        <div className=\"override-recording\">\n          <input \n            type=\"file\" \n            accept=\"audio/*\"\n            name=\"recording\" \n            onChange={props.handleFileUpload}\n            required\n          />\n          <button className=\"revert-btn\" onClick={revertToOldRecording}>\n            Revert to Existing Recording\n          </button>\n        </div>\n       \n      )\n      //If we are editing the song, display button to override recording\n    } else {\n      return (\n        <button type=\"button\" onClick={overrideRecording}>\n          Override Recording\n        </button>\n      )\n    }\n  }\n  return (\n    <div className=\"RecordingInput\">\n      {content()}\n    </div>\n  )\n}\n\nexport default RecordingInput;\n","import RecordingInput from \"./RecordingInput.js\"\nimport CancelIcon from \"@material-ui/icons/Close\";\nimport \"../style/PartFormlet.css\"\n\nfunction PartFormlet(props) {\n\n  const removePart = function() {\n    props.removePart(props.index)\n  }\n\n  const handleFormChange = function(e)  {\n    props.updatePart(props.index, e.target.name, e.target.value);\n  }\n\n  const handleFileUpload = function(e) {\n    props.updatePart(props.index, e.target.name, e.target.files[0]);\n  }\n\n  const className = function() {\n    return (props.part.mode === \"edit\" ? \"PartFormlet edit-part\" : \"PartFormlet\")\n  }\n\n  return (\n    <div className={className()}>\n      <h4 className=\"part-number\">{`Part ${props.index + 1}`}</h4>\n      <input \n        type=\"text\" \n        name=\"name\" \n        className=\"text-input\"\n        placeholder=\"Name\"\n        value={props.part.name} \n        onChange={handleFormChange}\n        required\n      />\n      <input \n        type=\"text\" \n        name=\"initial\" \n        className=\"text-input initial-input\"\n        placeholder=\"Initial\"\n        value={props.part.initial} \n        onChange={handleFormChange}\n        required\n      />\n      <button type=\"button\" className=\"remove-part-btn\" onClick={removePart}>\n        <CancelIcon />\n      </button>\n      <RecordingInput\n        mode={props.part.mode}\n        handleFileUpload={handleFileUpload}\n      />\n    </div>\n  )\n}\n\nexport default PartFormlet","import PartFormlet from \"./PartFormlet.js\"\nimport { useEffect, useState } from \"react\";\nimport { apiUrl } from \"../apiUrl.js\";\nimport uniqid from \"uniqid\";\nimport axios from \"axios\";\nimport \"../style/SongForm.css\";\n\nfunction SongForm(props) {\n\n  const newPart = function() {\n    return {\n      name: \"\",\n      initial: \"\",\n      recording: \"\",\n      mode: \"new\",\n      key: uniqid()\n    }\n  }\n\n  const railsToJs = function(railsPart) {\n     //Take Rails Part object and return the React equivalent\n     return {\n       id: railsPart.id,\n       name: railsPart.name,\n       initial: railsPart.initial,\n       recording: \"existing\",\n       mode: \"edit\",\n       key: uniqid()\n     }\n  }\n   \n  const initializeParts = function() {\n    //If the SongForm is for a new song or for one without any fulfilled parts,\n    //return an array with a single newPart\n    if (!props.editableParts) {\n      return [newPart()];\n    } else {\n      let initialParts = [...props.editableParts];\n      //Pad initialParts with blank part objects wherever pitch order\n      //does not correspond to a fulfilled parts\n      for (let i = 0; i < props.editableSong[\"parts_promised\"]; i++) {\n        if (initialParts[i] && i === initialParts[i][\"pitch_order\"]) {\n          //if the index corresonds to a pitch order that has been fulfilled,  \n          //replace Rails Part with the React Part\n          initialParts.splice(i, 1, railsToJs(initialParts[i]));      \n        } else {\n          //If not, add a new part at that index\n          initialParts.splice(i, 0, newPart());\n        }\n      }\n      return initialParts;\n    }\n  }\n\n  const initializeTitle = function() {\n    //If we are editing the song, initialize with existing title; \n    //otherwise intialize with a blank title\n    return (props.factoryMode === \"edit\" ? props.editableSong.title : \"\")\n  }\n\n  const [parts, setParts] = useState(() => initializeParts());\n  const [title, setTitle] = useState(() => initializeTitle());\n  \n  const closeForm = function() {\n    props.setFactoryMode(\"idle\")\n    props.setJobStatus(\"none\")\n  }\n\n  const handleChange = function(e) {\n    setTitle(e.target.value);\n  }\n\n  const addPart = function() {\n    //Create a new part object and add it to the parts array\n    const additionalPart = newPart();\n    setParts(parts => [...parts, additionalPart]);\n    return newPart\n  }\n\n  const removePart = function(index) {\n    //Remove part form parts array if there is more than one part\n    if (parts.length > 1) {\n      const oldParts = parts;\n      oldParts.splice(index, 1);\n      setParts([...oldParts]);\n    }\n  }\n\n  const updatePart = function(index, property, newValue) {\n    const oldParts = parts;\n    //Select part/property and assign the new value\n    oldParts[index][property] = newValue;\n    setParts([...oldParts]);\n  }\n\n  const assembleLoadingsObject = function(loadingParts) {\n    props.setLoadings(loadings => {\n      loadings = {}\n      loadingParts.forEach(part => {\n        loadings[part.name] = {success: false, mode: part.mode, progressEvent: {}}\n      });\n      return {...loadings}\n    });\n  }\n\n  const indicateSuccess = function(part) {\n    props.setLoadings(loadings => {\n      loadings[part.name].success = true;\n      return {...loadings};\n    });\n  }\n\n  const getObsoleteParts = function() {\n    const oldParts = Object.values(props.editableParts);\n    //Filter out the new parts (which don't have an id)\n    //and get the ids of the remaining parts (which are being updated)\n    const UpdatingPartIds = parts.filter(part => part.id).map(part => part.id);\n    return oldParts.filter(part => !UpdatingPartIds.includes(part.id));\n  }\n\n  const deleteObsoleteParts = function() {\n    const obsoleteParts = getObsoleteParts();\n    props.setLoadings(loadings => {\n      //Add a loading object for each part to loadings\n      obsoleteParts.forEach(part => {\n        loadings[part.name] = {success: false, mode: \"destroy\"}\n      })\n      return {...loadings}\n    })\n    obsoleteParts.forEach(part => {\n      destroyExistingPart(props.editableSong.id, part)\n    });\n  }\n\n\n\n  const destroyExistingSong = async function(cancelSources) {\n    props.setFactoryMode(\"destruction\");\n    try {\n      const response = await axios({\n        method: \"delete\",\n        url: `${apiUrl}/songs/${props.editableSong.id}`,\n        headers: { Authorization: `Bearer ${props.token}` },\n        cancelToken: cancelSources[0].token,\n        timeout: 3000\n      })\n      if (response.status === 200) {\n        props.setJobStatus(\"destroyed\");\n        props.setFactoryMode(\"idle\");\n      }\n    } catch(err) {\n      props.setJobStatus(\"failedToDestroy\");\n    }\n  }\n  \n  const destroyExistingPart = async function(songId, part) {\n    try {\n      const response = await axios({\n        method: \"delete\",\n        url: `${apiUrl}/songs/${songId}/parts/${part.id}`,\n        headers: { Authorization: `Bearer ${props.token}` },\n        timeout: 3000\n      })    \n      //If the part destroys succesfully, update loadings object\n      if (response.status === 200) {\n        indicateSuccess(part);\n      }\n    } catch(err) {\n      console.log(err)\n    }\n  }\n\n  const sendPart = async function(songId, part, partData, cancelSource) {\n    //Assemble Axios request \n    const method = (part.mode === \"new\" ? \"post\" : \"patch\")\n    const id = (part.mode === \"new\" ? \"\" : part.id)\n    try {\n      const response = await axios({\n        method: method,\n        url: `${apiUrl}/songs/${songId}/parts/${id}`,\n        data: partData,\n        headers: { Authorization: `Bearer ${props.token}` },\n        cancelToken: cancelSource.token,\n        timeout: 30000\n      })\n      //If the part uploads succesfully, update loadings object\n      //functionize\n      if (response.status === 200) {\n        indicateSuccess(part);\n      }\n    } catch (err) {\n      if (props.factoryMode === \"new\") {\n        props.setJobStatus(\"failedToCreate\");\n     } else if (props.factoryMode === \"edit\") {\n       props.setJobStatus(\"failedToUpdate\");\n     }\n    }\n  }\n\n  const submitPart = function(part, songId, cancelSource) {\n    //Create a FormData object and append the Part params\n    const partData = new FormData();\n    partData.append(\"name\", part.name);\n    partData.append(\"initial\", part.initial);\n    partData.append(\"recording\", part.recording)\n    partData.append(\"song_id\", songId);\n    partData.append(\"pitch_order\", parts.indexOf(part))\n    //POST/PATCH the Part\n    sendPart(songId, part, partData, cancelSource)\n  }\n\n  const sendSong = async function(songData, cancelSource) {\n    //Assemble axios request\n    const method = (props.factoryMode === \"new\" ? \"post\" : \"patch\")\n    const id = (props.factoryMode === \"new\" ? \"\" : props.editableSong.id)\n    try {\n      return await axios({\n        method: method,\n        url: `${apiUrl}/songs/${id}`, \n        data: songData,\n        headers: { Authorization: `Bearer ${props.token}` },\n        cancelToken: cancelSource.token,\n        timeout: 3000\n      })\n      //If request fails, set jobStatus to appropriate failure status\n    } catch (err) {\n      if (props.jobStatus === \"creating\") {\n        props.setJobStatus(\"failedToCreate\");\n      } else if (props.jobStatus === \"updating\") {\n        props.setJobStatus(\"failedToUpdate\");\n      }\n      console.log(err);\n    }\n  }\n\n  const submitSong = async function(cancelSources) {\n    ///Add a loading object for each part to loadings\n    assembleLoadingsObject(parts)\n    //If this is a PATCH and there any parts being removed, delete them\n    if (props.editableParts) {\n      deleteObsoleteParts();\n    }\n    props.setFactoryMode(\"delivery\");\n\n    //Assemble the FormData object\n    const songData = new FormData();\n    songData.append(\"title\", title)\n    songData.append(\"parts_promised\", parts.length)\n    //POST or PATCH the new Song\n    const response = await sendSong(songData, cancelSources[0])\n    //After sending the Song, submit each of the Song's Parts\n    if (response) {\n      parts.forEach((part, index) => {\n        submitPart(part, response.data.id, cancelSources[index + 1])\n      })\n    }\n  }\n\n  const submitValue = function() {\n    return (props.factoryMode === \"new\" ? \"Submit Song\" : \"Update Song\")\n  }\n\n\n  const deleteBtn = function() {\n    //If we are editing an existing song, display button to delete Song\n    if (props.factoryMode === \"edit\") {\n      return (\n        <button type=\"button\" className=\"pseudo-btn\" onClick={handleDestroySong}>Delete Song</button>\n      )\n    }\n  }\n\n  const handleDestroySong = function() {\n    const confirmation = window.confirm(\"Do you really want to delete this song?\");\n    if (confirmation) {\n     props.setJobStatus(\"destroying\")\n    }\n  }\n\n  const handleSubmit = function(e) {\n    e.preventDefault();\n    //set jobStatus to the appropriate delivery status\n    if (props.factoryMode === \"new\") {\n      props.setJobStatus(\"creating\")\n    } else {\n      props.setJobStatus(\"updating\")\n    }\n  }\n\n\n  useEffect(() => {\n  \n    if (props.jobStatus === \"creating\" || props.jobStatus === \"updating\") {\n      //Fill an array with one Axios Cancel Token source per part request\n      const cancelSources = parts.map(() => axios.CancelToken.source())\n      //Add in one more for the song request itself\n      cancelSources.push(axios.CancelToken.source())\n      props.setCancelSources([...cancelSources])\n      submitSong(cancelSources)\n    } else if (props.jobStatus === \"destroying\") {\n      const cancelSources = [axios.CancelToken.source()];\n      props.setCancelSources([...cancelSources])\n      destroyExistingSong(cancelSources)\n    }\n    //eslint-disable-next-line\n  }, [props.jobStatus])\n\n  return (\n    <form className=\"SongForm\" onSubmit={handleSubmit}>\n      <div className=\"title-bar\">\n        <input \n          type=\"text\" \n          name=\"title\" \n          className=\"text-input song-title-input\"\n          placeholder=\"Song Title\"\n          value={title} \n          onChange={handleChange}\n        />\n      </div>\n      {parts.map((part, index) => {\n        return (\n          <PartFormlet\n            index={index} \n            key={part.key} \n            part={part}\n            updatePart={updatePart}\n            removePart={removePart}\n          />\n        )\n    })}\n      <div className=\"main-form-btns\">\n        <button \n          type=\"button\" \n          className=\"pseudo-btn\" \n          id=\"add-part-btn\" \n          onClick={addPart}\n        >\n          Add Part\n        </button>\n        <button type=\"button\" className=\"song-form-cancel pseudo-btn\" onClick={closeForm}>\n          Cancel\n        </button>\n        {deleteBtn()}\n        <input type=\"submit\" className=\"pseudo-btn\" value={submitValue()}/>\n      </div>\n      \n    </form>\n  )\n}\n\nexport default SongForm;","import \"../style/PartLoadingEntry.css\";\n\nfunction PartLoadedEntry(props) {\n\n  const loadedEntryVerbs = function() {\n    // Return status verbs based on whether mode is new, edit, or destroy\n    if (props.loading.mode === \"new\") {\n      return {working: \"Loading\", finished: \"Loaded\"}\n    } else if (props.loading.mode === \"edit\") {\n      return {working: \"Updating\", finished: \"Updated\"}\n    } else if (props.loading.mode === \"destroy\") {\n      return {working: \"Destroying\", finished: \"Destroyed\"}\n    }\n  }\n  const content = function() {\n    if (props.loading.success) {\n      return `${props.partName}: ${loadedEntryVerbs().finished}`;\n    } else {\n      return `${props.partName}: ${loadedEntryVerbs().working}`;\n    }\n  }\n\n  //Apply \"working\" or \"finished\" className depending whether loading complete\n  const className = () => (props.loading.success ? \"finished\" : \"working\");\n\n  return (\n    <div className=\"PartLoadedEntry\" >\n      <span className={className()}>{content()}</span>\n    </div>\n  )\n}\n\nexport default PartLoadedEntry;","import PartLoadingEntry from \"./PartLoadingEntry.js\";\nimport \"../style/SubmitProgress.css\"\n\nfunction SubmitProgress(props) {\n \n  const topMessage = function() {\n    switch (props.jobStatus) {\n      case \"creating\":\n       return \"Creating song...\";\n      case \"updating\":\n        return \"Updating song...\"\n      case \"destroying\":\n        return \"Destroying song...\";\n      default:\n        return \"\";\n    }\n  }\n\n  const progressStatus = function() {\n    if (props.jobStatus === \"creating\" || props.jobStatus === \"updating\") {\n      return Object.entries(props.loadings).map(partLoadingEntry => {\n        return (\n          <PartLoadingEntry\n            partName={partLoadingEntry[0]}\n            loading={partLoadingEntry[1]}\n            key={`${partLoadingEntry[0]}-key`}\n          />\n        )\n      })\n    } else {\n      return \"\"\n    }\n  }\n\n  const responseMessage = function() {\n    switch (props.jobStatus) {\n      case \"submitted\":\n        return \"Song successfully created!\";\n      case \"updated\":\n        return \"Song succesfully updated!\";\n      case \"destroyed\":\n        return \"Song successfully destroyed!\";\n      case \"failedToCreate\":\n        return \"Rats! Song creation could not be completed\";\n      case \"failedToUpdate\":\n      return \"Rats! Song could not be succesfully updated\"\n      case \"failedToDestroy\":\n        return \"Rats! Song could not be succesfully destroyed\";\n      default:\n        return \"\";\n    }\n  }\n    \n  return (\n    <div className=\"SubmitProgress\">\n      <span className=\"top-message\">{topMessage()}</span>\n      <div className=\"progress-status\">\n        {progressStatus()}\n        <span className=\"report-message\">{responseMessage()}</span>\n      </div>\n    </div>\n  )\n}\n\nexport default SubmitProgress;","import SongForm from \"./SongForm.js\";\nimport SubmitProgress from \"./SubmitProgress.js\"\nimport { useState, useEffect } from \"react\";\nimport \"../style/SongFactory.css\";\n\nfunction SongFactory(props) {\n  //loadings is an object of loading objects\n  //Each loading object has 2 keys, success (Boolean) \n  //, and mode (String: \"create\", \"update\", or \"destroy\")\n  const [loadings, setLoadings] = useState({});\n \n  const handleNewSong = function() {\n    props.setFactoryMode(\"new\");\n    props.setJobStatus(\"assembly\");\n  }\n\n  const content = function() {\n    switch (props.factoryMode) {\n      //If we are creating or updating a song, render the SongForm\n      case \"new\":\n        return (\n          <SongForm\n            token={props.token}\n            setFactoryMode={props.setFactoryMode}\n            setLoadings={setLoadings}\n            setJobStatus={props.setJobStatus}\n            jobStatus={props.jobStatus}   \n            factoryMode=\"new\"\n            setCancelSources={props.setCancelSources}\n          />\n        );\n      case \"edit\":\n        return (\n          <SongForm\n            token={props.token}\n            setFactoryMode={props.setFactoryMode}\n            setLoadings={setLoadings}\n            setJobStatus={props.setJobStatus}\n            jobStatus={props.jobStatus}\n            editableSong={props.editableSong}\n            editableParts={props.editableParts}\n            factoryMode=\"edit\"\n            setCancelSources={props.setCancelSources}\n          />\n        );\n      //If we are submitting the SongForm, or if we are destroying a song,\n      //render SubmitProgress\n      case \"delivery\":\n      case \"destruction\":\n        return (\n          <SubmitProgress \n            loadings={loadings}\n            setJobStatus={props.setJobStatus}\n            jobStatus={props.jobStatus}\n          />\n        );\n      default:\n        return (\n          <span className=\"prompt\">\n            Create a song or select one to edit\n          </span>\n        )\n    }\n  }\n\n  const button = function() {\n    //If a job isn't in progress, show the new song button\n    if (\n      !(props.jobStatus === \"assembly\") &&\n      !(props.jobStatus === \"creating\") &&\n      !(props.jobStatus === \"updating\") &&\n      !(props.jobStatus === \"destroying\") \n      ) {\n      return (\n        <button \n          className=\"pseudo-btn\" \n          id=\"new-song-btn\" \n          onClick={handleNewSong}\n        >\n          New Song\n        </button>\n      )\n    }\n  }\n\n  useEffect(() => {\n    //If all parts are loading, mark job as finished\n    if (Object.values(loadings).every(loading => loading.success)) {\n      if (props.jobStatus === \"creating\") {\n        props.setJobStatus(\"created\");\n        props.setFactoryMode(\"idle\");\n      } else if (props.jobStatus === \"updating\") {\n        props.setJobStatus(\"updated\");\n        props.setFactoryMode(\"idle\");\n      }\n    }\n    //eslint-disable-next-line\n  }, [loadings])\n\n\n  return (\n    <div className=\"SongFactory\">\n      <div className=\"central-container\">\n        {button()}\n        {content()}\n      </div>\n    </div>\n  )\n}\n\nexport default SongFactory;","import EditIcon from \"@material-ui/icons/Edit\";\nimport \"../style/SongInfo.css\"\n\nfunction SongInfo(props) {\n  const parts = function() {\n    //If the song has parts, render parts info list\n    if (props.songParts) {\n      return props.songParts.map(part => {\n        return <span className=\"part-name\" key={part.name}>{part.name}</span>\n      })\n    }\n  }\n\n  const editButton = function() {\n    //If a job not currently being assembled or executed, display edit button\n    switch (props.jobStatus) {\n      case \"creating\":\n      case \"updating\":\n      case \"destroying\":\n      case \"assembly\":\n        return \"\";\n      default: \n        return (\n          <button type=\"button\" className=\"edit-btn\" onClick={handleEdit}>\n            <EditIcon />\n          </button>\n        )\n    }\n  }\n\n  const numberPromised = function() {\n    //If no parts were fulfilled or not all the parts were fulfilled,\n    //indicate the number of parts expected\n    if (!props.songParts || props.song[\"parts_promised\"] > props.songParts.length) {\n      return ` (${props.song[\"parts_promised\"]} expected)`\n    } else {\n      return \"\";\n    }\n  }\n\n  const handleEdit = function() {\n    props.editSong(props.song)\n  }\n  \n  return (\n    <div className=\"SongInfo\">\n      <div className=\"song-info-title-bar\">\n        <h5 className=\"song-info-title\">{props.song.title}</h5>\n        {editButton()}\n      </div>\n      <div className=\"song-info-parts\">\n        <div className=\"song-info-parts-title-bar\">\n          <h6 className=\"parts-header\">Parts</h6>\n          <span className=\"number-promised\">{numberPromised()}</span>\n        </div>\n        <div className=\"song-parts\">{parts()}</div>\n      </div>\n      \n    </div>\n  )\n}\n\nexport default SongInfo;","import SongInfo from \"./SongInfo.js\";\nimport \"../style/CurrentCollection.css\"\n\nfunction CurrentCollection(props) {\n\n  const songs = function() {\n    //If parts have been loaded and set in state, render SongInfo list\n    if (Object.keys(props.parts).length > 0) {\n      return props.songs.map(song => {\n        return (\n          <SongInfo\n            song={song}\n            songParts={props.parts[song.id.toString()]}\n            editSong={props.editSong}\n            key={song.id}\n            jobStatus={props.jobStatus}\n          />\n        )\n      })\n    }\n  }\n  return (\n    <div className=\"CurrentCollection\">\n      {songs()}\n    </div>\n  )\n}\n\nexport default CurrentCollection;","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport SongFactory from \"./SongFactory.js\";\nimport CurrentCollection from \"./CurrentCollection.js\"\nimport { apiUrl } from \"../apiUrl.js\";\nimport \"../style/Admin.css\"\n\nfunction Admin(props) {\n  const [songs, setSongs] = useState([]);\n  const [parts, setParts] = useState([]);\n  const [factoryMode, setFactoryMode] = useState(\"idle\");\n  //jobStatus can be: none, assembly, creating, created, updating, updated\n  //destroying, destroyed, failedToCreate, failedToUpdate, or failedToDestroy\n  const [jobStatus, setJobStatus] = useState(\"none\");\n  const [editableSong, setEditableSong] = useState(null);\n  const [editableParts, setEditableParts] = useState(null);\n  const [cancelSources, setCancelSources] = useState([]);\n\n  const editSong = function(song) {\n    setEditableSong(song);\n    setEditableParts(parts[song.id.toString()]);\n    setFactoryMode(\"edit\");\n    setJobStatus(\"assembly\");\n  }\n\n  const loadSongs = async function(abortControllerSignal) {\n    //fetch songs/parts from Rails API\n    try {\n      const response = await fetch(`${apiUrl}/admin`, {\n        headers: { Authorization: `Bearer ${props.token}` },\n        signal: abortControllerSignal\n      })\n      const songsAndParts = await response.json();\n      setSongs(songsAndParts.songs);\n      setParts(songsAndParts.parts);\n    } catch(err) {\n      if (!abortControllerSignal.aborted) {\n        console.log(err)\n      }\n    }\n  }\n\n  //Execute on ComponentDidMount and when the CurrentCollection might changes\n  useEffect(() => {\n    //If the jobStatus changes and a job isn't in progress, reload the CurrentCollection\n    if (\n      !(jobStatus === \"assembly\") &&\n      !(jobStatus === \"creating\") &&\n      !(jobStatus === \"updating\") &&\n      !(jobStatus === \"destroying\") \n      ) {\n      const abortController = new AbortController()\n      loadSongs(abortController.signal);\n      return () => abortController.abort();\n    }\n    //When Admin unmounts, cancel all of the Axios requests from SongForm\n    return () => cancelSources.forEach(source => source.cancel())\n  // eslint-disable-next-line \n  }, [jobStatus])\n\n  return (\n    <div className=\"Admin\">\n      <Link to=\"/\">\n        <button className=\"nav-btn\">Home</button>\n      </Link>\n      <div className=\"layout-container\">\n        <CurrentCollection\n          songs={songs}\n          parts={parts}\n          editSong={editSong}\n          jobStatus={jobStatus}\n        />\n        <SongFactory \n          jobStatus={jobStatus}\n          setJobStatus={setJobStatus}\n          factoryMode={factoryMode}\n          setFactoryMode={setFactoryMode}\n          editableSong={editableSong}\n          editableParts={editableParts}\n          token={props.token}\n          setCancelSources={setCancelSources}\n        />\n      </div>\n    </div>\n    \n  )\n}\n\nexport default Admin;","import { Redirect } from \"react-router-dom\";\nimport Admin from \"./Admin.js\";\n\nfunction AdminFilter(props) {\n  //If the admin is authenticated by the presence of a token, render the Admin page.\n  //Otherwise, redirect to Login.\n  return (props.token ? <Admin token={props.token}/> : <Redirect to=\"/login\" />)\n  \n}\n\n\nexport default AdminFilter;\n","import { useState } from \"react\";\nimport { Redirect } from \"react-router\";\nimport { apiUrl } from \"../apiUrl.js\"\nimport \"../style/Login.css\";\n\nfunction Login(props) {\n  \n  //Even if token is present, set isAuthed to false\n  const [isAuthed, setIsAuthed] = useState(false)\n  const [incorrectCredentials, setIncorrectCredentials] = useState(false)\n\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\"\n  })\n  \n  const handleChange = function(e) {\n    setFormData({...formData, [e.target.name]: e.target.value})\n  }\n\n  const handleSubmit = function(e) {\n    e.preventDefault();\n\n    //Create, fill, and post Login FormData\n    const params = new FormData();\n    params.append(\"password\", formData.password)\n    params.append(\"username\", formData.username)\n\n    fetch(`${apiUrl}/login`, {\n      method: \"post\",\n      body: params\n    })\n    .then(response => {\n      return response.json();\n    })\n    .then(decodedResponse => {\n      //If login successful, set the token in the App component\n      // and in localStorage, and indicate that the admin is authed\n      if (decodedResponse.status === 200) {\n        localStorage.setItem(\"token\", decodedResponse.token);\n        props.setToken(decodedResponse.token);\n        setIsAuthed(true);\n        //If the response is 401 Unauthorized, indicate incorrectCredentials\n      } else if (decodedResponse.status === 401) {\n        setIncorrectCredentials(true)\n      }\n    })\n    .catch(err => {\n      console.log(err)\n    })\n  }\n\n  const incorrectCredentialsMessage = function() {\n    return (incorrectCredentials ? \"Either the username or the password is incorrect\" : \"\")\n  }\n\n  if (isAuthed) {\n    return <Redirect to=\"/admin\"></Redirect>\n  } else {\n    return (\n      <div className=\"Login central-container\">\n        \n          <span id=\"incorrect-credentials-message\">\n            {incorrectCredentialsMessage()}\n          </span>\n          <form onSubmit={handleSubmit}>\n            <label htmlFor=\"username\">Username</label>\n            <input \n              type=\"text\" \n              id=\"username\" \n              name=\"username\" \n              className=\"text-input\"\n              value={formData.username}\n              onChange={handleChange}\n              required\n            />\n            <label htmlFor=\"password\">Password</label>\n            <input \n              type=\"password\" \n              id=\"password\" \n              name=\"password\"\n              className=\"text-input\" \n              value={formData.password}\n              onChange={handleChange}\n              required\n            />\n            <input type=\"submit\" className=\"pseudo-btn\" value=\"Log in\"/>\n          </form>\n      </div>\n    )\n  }\n}\n\nexport default Login","import { HashRouter, Switch, Route } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport Home from \"./components/Home.js\";\nimport AdminFilter from \"./components/AdminFilter.js\";\nimport Login from \"./components/Login.js\";\nimport \"./App.css\"\n\nfunction App() {\n  const [token, setToken] = useState(localStorage.getItem(\"token\"))\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/admin\" render={(props) => <AdminFilter {...props} token={token} />}/>\n        <Route path=\"/login\" render={(props) => <Login {...props} setToken={setToken} />} />\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}